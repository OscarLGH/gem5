// -*- mode:c++ -*-

// Copyright (c) 2009 The University of Edinburgh
// Copyright (c) 2021 IBM Corporation
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met: redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer;
// redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution;
// neither the name of the copyright holders nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

////////////////////////////////////////////////////////////////////
//
// Vector Integer ALU instructions
//

let {{

vectorCheckMsrCode = '''
        Msr msr = MSR;
        if (msr.vec == 0) {
            fault = std::make_shared<VectorUnavailFault>();
            return fault;
        }
    '''
}};


// Instructions that use source registers Ra and Rb, with the result
// placed into Rt but do not check for carry, overflow or the Rc bit.
def format VectorIntArithOp(code, inst_flags = []) {{

    code = code + vectorCheckMsrCode
    # Generate the class
    (header_output, decoder_output, decode_block, exec_output) = \
        GenAluOp(name, Name, 'IntArithOp', code, inst_flags, BasicDecode,
                 BasicConstructor)
}};

// Primary format for floating point operate instructions:
def format VectorFloatOp(code, inst_flags = []) {{

    code = code + vectorCheckMsrCode

    iop = InstObjParams(name, Name, 'FloatOp',
                        {"code": code},
                        inst_flags)
    header_output = BasicDeclare.subst(iop)
    decoder_output = BasicConstructor.subst(iop)
    decode_block = BasicDecode.subst(iop)
    exec_output = BasicExecute.subst(iop)
}};

def format VecLoadIndexOp(memacc_code, update_code = {{ }},
                       ea_code = {{ EA = ((Ra + Rb) & ~(0xfULL)); }},
                       ea_code_ra0 = {{ EA = Rb & ~(0xfULL); }},
                       mem_flags = [], inst_flags = []) {{

    memacc_code = memacc_code + vectorCheckMsrCode
    (header_output, decoder_output, decode_block, exec_output) = \
        GenMemOp(name, Name, memacc_code, update_code, ea_code, ea_code_ra0,
                 'MemIndexOp', 'Load', mem_flags, inst_flags)
}};


def format VecStore16IndexOp(memacc_code, update_code = {{ }},
                        ea_code = {{ EA = ((Ra + Rb) & ~(0xfULL)); }},
                        ea_code_ra0 = {{ EA = Rb & ~(0xfULL); }},
                        mem_flags = [], inst_flags = []) {{
    memacc_code = memacc_code + vectorCheckMsrCode
    (header_output, decoder_output, decode_block, exec_output) = \
        GenMemOp(name, Name, memacc_code, update_code, ea_code, ea_code_ra0,
                 'MemIndexOp', 'Store', mem_flags, inst_flags)
}};

def format VecStore8IndexOp(memacc_code, update_code = {{ }},
                        ea_code = {{ EA = ((Ra + Rb) & ~(0x7ULL)); }},
                        ea_code_ra0 = {{ EA = Rb & ~(0x7ULL); }},
                        mem_flags = [], inst_flags = []) {{
    memacc_code = memacc_code + vectorCheckMsrCode
    (header_output, decoder_output, decode_block, exec_output) = \
        GenMemOp(name, Name, memacc_code, update_code, ea_code, ea_code_ra0,
                 'MemIndexOp', 'Store', mem_flags, inst_flags)
}};

def format VecStore4IndexOp(memacc_code, update_code = {{ }},
                        ea_code = {{ EA = ((Ra + Rb) & ~(0x3ULL)); }},
                        ea_code_ra0 = {{ EA = Rb & ~(0x3ULL); }},
                        mem_flags = [], inst_flags = []) {{
    memacc_code = memacc_code + vectorCheckMsrCode
    (header_output, decoder_output, decode_block, exec_output) = \
        GenMemOp(name, Name, memacc_code, update_code, ea_code, ea_code_ra0,
                 'MemIndexOp', 'Store', mem_flags, inst_flags)
}};

def format VecStore2IndexOp(memacc_code, update_code = {{ }},
                        ea_code = {{ EA = ((Ra + Rb) & ~(0x1ULL)); }},
                        ea_code_ra0 = {{ EA = Rb & ~(0x1ULL); }},
                        mem_flags = [], inst_flags = []) {{
    memacc_code = memacc_code + vectorCheckMsrCode
    (header_output, decoder_output, decode_block, exec_output) = \
        GenMemOp(name, Name, memacc_code, update_code, ea_code, ea_code_ra0,
                 'MemIndexOp', 'Store', mem_flags, inst_flags)
}};



