format FloatRCCheckOp {
    21: fadds({{
        double tmp;
        Fpscr fpscr_0 = FPSCR;
        fp_before_cal(fpscr_0);
        double src1 = Va_df[1];
        double src2 = Vb_df[1];
        std::tie(tmp, fpscr_0) = bfp32_ADD(src1, src2, FPSCR);
        fpscr_0 = vsx_set_class((float)tmp, fpscr_0);
        double dst = tmp;
        Vt_df[1] = dst;
        FPSCR = fpscr_0;
        //dst = src1 + src2;
        //ALL PASSED.
    }});
    20: fsubs({{
        double tmp;
        Fpscr fpscr_0 = FPSCR;
        fp_before_cal(fpscr_0);
        double src1 = Va_df[1];
        double src2 = Vb_df[1];
        std::tie(tmp, fpscr_0) = bfp32_ADD(src1, bfp_NEGATE(src2), FPSCR);
        fpscr_0 = vsx_set_class((float)tmp, fpscr_0);
        double dst = tmp;
        Vt_df[1] = dst;
        FPSCR = fpscr_0;
        //dst = src1 - src2;
        //ALL PASSED.
    }});
    25: fmuls({{
        double tmp;
        Fpscr fpscr_0 = FPSCR;
        fp_before_cal(fpscr_0);
        double src1 = Va_df[1];
        double src3 = Vc_df[1];
        std::tie(tmp, fpscr_0) = bfp32_MULTIPLY(src1, src3, FPSCR);
        fpscr_0 = vsx_set_class((float)tmp, fpscr_0);
        double dst = tmp;
        Vt_df[1] = dst;
        FPSCR = fpscr_0;
        //dst = src1 * src3;
        //ALL PASSED.
    }});
    18: fdivs({{
        double tmp;
        Fpscr fpscr_0 = FPSCR;
        fp_before_cal(fpscr_0);
        double src1 = Va_df[1];
        double src2 = Vb_df[1];
        std::tie(tmp, fpscr_0) = bfp32_DIV(src1, src2, FPSCR);
        fpscr_0 = vsx_set_class((float)tmp, fpscr_0);
        double dst = tmp;
        Vt_df[1] = dst;
        FPSCR = fpscr_0;
        //dst = src1 / src2;
        //ALL PASSED.
        }});
    29: fmadds({{
        double tmp;
        Fpscr fpscr_0 = FPSCR;
        fp_before_cal(fpscr_0);
        double src1 = Va_df[1];
        double src2 = Vb_df[1];
        double src3 = Vc_df[1];
        std::tie(tmp, fpscr_0) =
            bfp32_MULTIPLY_ADD(src1, src3, src2, FPSCR);
        fpscr_0 = vsx_set_class((float)tmp, fpscr_0);
        double dst = tmp;
        Vt_df[1] = dst;
        FPSCR = fpscr_0;
        //dst = (src1 * src3) + src2; }});
    28: fmsubs({{
        double tmp;
        Fpscr fpscr_0 = FPSCR;
        fp_before_cal(fpscr_0);
        double src1 = Va_df[1];
        double src2 = Vb_df[1];
        double src3 = Vc_df[1];
        std::tie(tmp, fpscr_0) =
            bfp32_MULTIPLY_ADD(src1, src3, bfp_NEGATE(src2), FPSCR);
        fpscr_0 = vsx_set_class((float)tmp, fpscr_0);
        double dst = tmp;
        Vt_df[1] = dst;
        FPSCR = fpscr_0;
        //dst = (src1 * src3) - src2; }});
    31: fnmadds({{
        double tmp;
        Fpscr fpscr_0 = FPSCR;
        fp_before_cal(fpscr_0);
        double src1 = Va_df[1];
        double src2 = Vb_df[1];
        double src3 = Vc_df[1];
        std::tie(tmp, fpscr_0) =
            bfp32_MULTIPLY_ADD(src1, src3, src2, FPSCR);
        tmp = bfp_NEGATE(tmp);
        fpscr_0 = vsx_set_class((float)tmp, fpscr_0);
        double dst = tmp;
        Vt_df[1] = dst;
        FPSCR = fpscr_0;
        //dst = -((src1 * src3) + src2); }});
    30: fnmsubs({{
        double tmp;
        Fpscr fpscr_0 = FPSCR;
        fp_before_cal(fpscr_0);
        double src1 = Va_df[1];
        double src2 = Vb_df[1];
        double src3 = Vc_df[1];
        std::tie(tmp, fpscr_0) =
            bfp32_MULTIPLY_ADD(src1, src3, bfp_NEGATE(src2), FPSCR);
        tmp = bfp_NEGATE(tmp);
        fpscr_0 = vsx_set_class((float)tmp, fpscr_0);
        double dst = tmp;
        Vt_df[1] = dst;
        FPSCR = fpscr_0;
        //dst = -((src1 * src3) - src2); }});
    22: fsqrts({{
        double src2 = Vb_df[1];
        double dst = sqrt(src2);
        Vt_df[1] = dst;
    }});
    24: fres({{
        double src2 = Vb_df[1];
        double dst = 1.0 / src2;
        Vt_df[1] = dst;
    }});
    26: frsqrtes({{
        double src2 = Vb_df[1];
        double dst = 1.0 / sqrt(src2);
        Vt_df[1] = dst;
    }});
}
