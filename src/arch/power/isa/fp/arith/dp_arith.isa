format FloatRCCheckOp {
    21: fadd({{
        double tmp;
        Fpscr fpscr_0 = FPSCR;
        fp_before_cal(fpscr_0);
        double src1 = Va_df[1];
        double src2 = Vb_df[1];
        std::tie(tmp, fpscr_0) = bfp64_ADD(src1, src2, FPSCR);
        fpscr_0 = vsx_set_class(tmp, fpscr_0);
        double dst = tmp;
        Vt_df[1] = dst;
        FPSCR = fpscr_0;
        //dst = src1 + src2;
        //ALL PASSED.
    }});

    20: fsub({{
        double tmp;
        Fpscr fpscr_0 = FPSCR;
        fp_before_cal(fpscr_0);
        double src1 = Va_df[1];
        double src2 = Vb_df[1];
        std::tie(tmp, fpscr_0) = bfp64_ADD(src1, bfp_NEGATE(src2), FPSCR);
        fpscr_0 = vsx_set_class(tmp, fpscr_0);
        double dst = tmp;
        Vt_df[1] = dst;
        FPSCR = fpscr_0;
        //ALL PASSED.
        //dst = src1 - src2;
    }});

    25: fmul({{
        double tmp;
        Fpscr fpscr_0 = FPSCR;
        fp_before_cal(fpscr_0);
        double src1 = Va_df[1];
        double src2 = Vb_df[1];
        double src3 = Vc_df[1];
        std::tie(tmp, fpscr_0) = bfp64_MULTIPLY(src1, src3, FPSCR);
        fpscr_0 = vsx_set_class(tmp, fpscr_0);
        double dst = tmp;
        Vt_df[1] = dst;
        FPSCR = fpscr_0;
        //dst = src1 * src3;
        //ALL PASSED.
    }});

    18: fdiv({{
        double tmp;
        Fpscr fpscr_0 = FPSCR;
        fp_before_cal(fpscr_0);
        double src1 = Va_df[1];
        double src2 = Vb_df[1];
        double src3 = Vc_df[1];
        std::tie(tmp, fpscr_0) = bfp64_DIV(src1, src2, FPSCR);
        fpscr_0 = vsx_set_class(tmp, fpscr_0);
        double dst = tmp;
        Vt_df[1] = dst;
        FPSCR = fpscr_0;
        //dst = src1 / src2;
        //ALL PASSED.
    }});
    
    29: fmadd({{
        double tmp;
        Fpscr fpscr_0 = FPSCR;
        fp_before_cal(fpscr_0);
        double src1 = Va_df[1];
        double src2 = Vb_df[1];
        double src3 = Vc_df[1];
        //std::tie(tmp, fpscr_0) = bfp64_MULTIPLY_ADD(src1, src3, src2, FPSCR);
        tmp = src1 * src3 + src2;
        fpscr_0 = vsx_set_class(tmp, fpscr_0);
        double dst = tmp;
        Vt_df[1] = dst;
        FPSCR = fpscr_0;
        //dst = (src1 * src3) + src2;
    }});

    28: fmsub({{
        double tmp;
        Fpscr fpscr_0 = FPSCR;
        fp_before_cal(fpscr_0);
        double src1 = Va_df[1];
        double src2 = Vb_df[1];
        double src3 = Vc_df[1];
        std::tie(tmp, fpscr_0) =
            bfp64_MULTIPLY_ADD(src1, src3, bfp_NEGATE(src2), FPSCR);
        fpscr_0 = vsx_set_class(tmp, fpscr_0);
        double dst = tmp;
        Vt_df[1] = dst;
        FPSCR = fpscr_0;
        //dst = (src1 * src3) - src2;
    }});

    31: fnmadd({{
        double tmp;
        Fpscr fpscr_0 = FPSCR;
        fp_before_cal(fpscr_0);
        double src1 = Va_df[1];
        double src2 = Vb_df[1];
        double src3 = Vc_df[1];
        std::tie(tmp, fpscr_0) =
            bfp64_MULTIPLY_ADD(src1, src3, src2, FPSCR);
        tmp = bfp_NEGATE(tmp);
        fpscr_0 = vsx_set_class(tmp, fpscr_0);
        double dst = tmp;
        Vt_df[1] = dst;
        FPSCR = fpscr_0;
        //dst = -((src1 * src3) + src2);
    }});

    30: fnmsub({{
        double tmp;
        Fpscr fpscr_0 = FPSCR;
        fp_before_cal(fpscr_0);
        double src1 = Va_df[1];
        double src2 = Vb_df[1];
        double src3 = Vc_df[1];
        std::tie(tmp, fpscr_0) =
            bfp64_MULTIPLY_ADD(src1, src3, bfp_NEGATE(src2), FPSCR);
        tmp = bfp_NEGATE(tmp);
        fpscr_0 = vsx_set_class(tmp, fpscr_0);
        double dst = tmp;
        Vt_df[1] = dst;
        FPSCR = fpscr_0;
        //dst = -((src1 * src3) - src2);
    }});

    22: fsqrt({{
        double src2 = Vb_df[1];
        double dst = sqrt(src2);
        Vt_df[1] = dst;
    }});

    24: fre({{
        double src2 = Vb_df[1];
        double dst = bfp64_RECIPROCAL_ESTIMATE(src2);
        Vt_df[1] = dst;
    }});

    26: frsqrte({{
        double src2 = Vb_df[1];
        double dst = 1.0 / sqrt(src2);
        Vt_df[1] = dst;
    }});

    23: fsel({{
        double src1 = Va_df[1];
        double src2 = Vb_df[1];
        double src3 = Vc_df[1];
        double dst;
        if (src1 >= 0.0)
            dst = src3;
        else
            dst = src2;
        Vt_df[1] = dst;
    }});
}
