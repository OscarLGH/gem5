format IntArithOp {
    60:vaddeuqm({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<__uint128_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<__uint128_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<__uint128_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<__uint128_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 1; i++) {

            /* CODE SEG 2 */
            vrt_val[i] = vra_val[i] + vrb_val[i] + (vrc_val[i] & 0x1);
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    61:vaddecuq({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<__uint128_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<__uint128_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<__uint128_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<__uint128_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 1; i++) {

            /* CODE SEG 2 */
            __uint128_t sum1 = vra_val[i] + vrb_val[i];
            __uint128_t cin1 = (sum1 < vra_val[i]) && (sum1 < vrb_val[i]) ? 1 :0;
            __uint128_t sum2 = sum1 + (vrc_val[i] & 0x1);
            __uint128_t cin2 = (sum2 < sum1) && (sum2 < (vrc_val[i] & 0x1)) ? 1 :0;
            vrt_val[i] = cin1 | cin2;
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    62:vsubeuqm({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<__uint128_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<__uint128_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<__uint128_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<__uint128_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 1; i++) {

            /* CODE SEG 2 */
            vrt_val[i] = vra_val[i] + ~vrb_val[i] + (vrc_val[i] & 0x1);
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    63:vsubecuq({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<__uint128_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<__uint128_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<__uint128_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<__uint128_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 1; i++) {

            /* CODE SEG 2 */
            __uint128_t sum1 = vra_val[i] + ~vrb_val[i];
            __uint128_t cin1 = (sum1 < vra_val[i]) && (sum1 < (~vrb_val[i])) ? 1 :0;
            __uint128_t sum2 = sum1 + (vrc_val[i] & 0x1);
            __uint128_t cin2 = (sum2 < sum1) && (sum2 < (vrc_val[i] & 0x1)) ? 1 :0;
            vrt_val[i] = cin1 | cin2;

            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    32:vmhaddshs({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<int16_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<int16_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<int16_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<int16_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 8; i++) {

            /* CODE SEG 2 */
            int32_t result = (((int32_t)vra_val[i] * (int32_t)vrb_val[i]) >> 15) + vrc_val[i];
            bool sat;
            std::tie(result, sat) = si16_CLAMP(result);
            uint64_t vscr = tc->readIntReg(INTREG_VSCR);
            vscr |= (sat & 0x10001);
            tc->setIntReg(INTREG_VSCR, vscr);
            vrt_val[i] = result;
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    33:vmhraddshs({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<int16_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<int16_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<int16_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<int16_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 8; i++) {

            /* CODE SEG 2 */
            int32_t result = (((int32_t)vra_val[i] * (int32_t)vrb_val[i] + 0x4000) >> 15) + vrc_val[i];
            bool sat;
            std::tie(result, sat) = si16_CLAMP(result);
            uint64_t vscr = tc->readIntReg(INTREG_VSCR);
            vscr |= (sat & 0x10001);
            tc->setIntReg(INTREG_VSCR, vscr);
            vrt_val[i] = result;
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    34:vmladduhm({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<uint16_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<uint16_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<uint16_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<uint16_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 8; i++) {

            /* CODE SEG 2 */
            vrt_val[i] = vra_val[i] * vrb_val[i] + vrc_val[i];
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    36:vmsumubm({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<uint8_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<uint8_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<uint32_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<uint32_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 4; i++) {

            /* CODE SEG 2 */
            uint32_t temp = vrc_val[i];
            for (auto j = 0; j < 4; j++) {
                temp += vra_val[i * 4 + j] * vrb_val[i * 4 + j];
            }
            vrt_val[i] = temp;
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    37:vmsummbm({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<int8_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<uint8_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<uint32_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<uint32_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 4; i++) {

            /* CODE SEG 2 */
            int32_t temp = vrc_val[i];
            for (auto j = 0; j < 4; j++) {
                temp += vra_val[i * 4 + j] * vrb_val[i * 4 + j];
            }
            vrt_val[i] = temp;
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    40:vmsumshm({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<int16_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<int16_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<int32_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<int32_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 4; i++) {

            /* CODE SEG 2 */
            int32_t temp = vrc_val[i];
            for (auto j = 0; j < 2; j++) {
                temp += (int32_t)vra_val[i * 2 + j] * (int32_t)vrb_val[i * 2 + j];
            }
            vrt_val[i] = temp;
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    41:vmsumshs({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<int16_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<int16_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<int32_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<int32_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 4; i++) {

            /* CODE SEG 2 */
            int64_t temp = vrc_val[i];
            for (auto j = 0; j < 2; j++) {
                temp += (int32_t)vra_val[i * 2 + j] * (int32_t)vrb_val[i * 2 + j];
            }
            bool sat;
            std::tie(temp, sat) = si32_CLAMP(temp);
            uint64_t vscr = tc->readIntReg(INTREG_VSCR);
            vscr |= (sat & 0x10001);
            tc->setIntReg(INTREG_VSCR, vscr);
            vrt_val[i] = temp;
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    38:vmsumuhm({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<uint16_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<uint16_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<uint32_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<uint32_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 4; i++) {

            /* CODE SEG 2 */
            uint64_t temp = vrc_val[i];
            for (auto j = 0; j < 2; j++) {
                temp += (uint64_t)vra_val[i * 2 + j] * (uint64_t)vrb_val[i * 2 + j];
            }
            vrt_val[i] = temp;
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    39:vmsumuhs({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<uint16_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<uint16_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<uint32_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<uint32_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 4; i++) {

            /* CODE SEG 2 */
            uint64_t temp = vrc_val[i];
            for (auto j = 0; j < 2; j++) {
                temp += (uint64_t)vra_val[i * 2 + j] * (uint64_t)vrb_val[i * 2 + j];
            }
            bool sat;
            std::tie(temp, sat) = ui32_CLAMP(temp);
            uint64_t vscr = tc->readIntReg(INTREG_VSCR);
            vscr |= (sat & 0x10001);
            tc->setIntReg(INTREG_VSCR, vscr);
            vrt_val[i] = temp;
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});
}