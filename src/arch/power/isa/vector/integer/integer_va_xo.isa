format VectorIntArithOp {
    60:vaddeuqm({{
        Vt_uq[0] = Va_uq[0] + Vb_uq[0] + (Vc_uq[0] & 0x1);
    }});

    61:vaddecuq({{
        __uint128_t sum1 = Va_uq[0] + Vb_uq[0];
        __uint128_t cin1 = (sum1 < Va_uq[0]) && (sum1 < Vb_uq[0]) ? 1 :0;
        __uint128_t sum2 = sum1 + (Vc_uq[0] & 0x1);
        __uint128_t cin2 = (sum2 < sum1) && (sum2 < (Vc_uq[0] & 0x1)) ? 1 :0;
        Vt_uq[0] = cin1 | cin2;
    }});

    62:vsubeuqm({{
        Vt_uq[0] = Va_uq[0] + ~Vb_uq[0] + (Vc_uq[0] & 0x1);
    }});

    63:vsubecuq({{
        __uint128_t sum1 = Va_uq[0] + ~Vb_uq[0];
        __uint128_t cin1 = (sum1 < Va_uq[0]) && (sum1 < ~Vb_uq[0]) ? 1 :0;
        __uint128_t sum2 = sum1 + (Vc_uq[0] & 0x1);
        __uint128_t cin2 = (sum2 < sum1) && (sum2 < (Vc_uq[0] & 0x1)) ? 1 :0;
        Vt_uq[0] = cin1 | cin2;
    }});

    32:vmhaddshs({{
        for (auto i = 0; i < 8; i++) {
            int32_t result =
                (((int32_t)Va_sh[i] * (int32_t)Vb_sh[i]) >> 15) + Vc_sh[i];
            bool sat;
            std::tie(result, sat) = si16_CLAMP(result);
            VSCR = VSCR | sat;
            Vt_sh[i] = result;
        }
    }});

    33:vmhraddshs({{
        for (auto i = 0; i < 8; i++) {
            int32_t result =
                (((int32_t)Va_sh[i] * (int32_t)Vb_sh[i] + 0x4000) >> 15)
                    + Vc_sh[i];
            bool sat;
            std::tie(result, sat) = si16_CLAMP(result);
            VSCR = VSCR | (sat & 0x10001);
            Vt_sh[i] = result;
        }
    }});

    34:vmladduhm({{
        for (auto i = 0; i < 8; i++) {
            Vt_uh[i] = Va_uh[i] * Vb_uh[i] + Vc_uh[i];
        }
    }});

    36:vmsumubm({{
        for (auto i = 0; i < 4; i++) {
            uint32_t temp = Vc_uw[i];
            for (auto j = 0; j < 4; j++) {
                temp += Va_ub[i * 4 + j] * Vb_ub[i * 4 + j];
            }
            Vt_uw[i] = temp;
        }
    }});

    37:vmsummbm({{
        for (auto i = 0; i < 4; i++) {
            int32_t temp = Vc_uw[i];
            for (auto j = 0; j < 4; j++) {
                temp += Va_sb[i * 4 + j] * Vb_ub[i * 4 + j];
            }
            Vt_uw[i] = temp;
        }
    }});

    40:vmsumshm({{
        for (auto i = 0; i < 4; i++) {
            int32_t temp = Vc_sw[i];
            for (auto j = 0; j < 2; j++) {
                temp +=
                    (int32_t)Va_sh[i * 2 + j] * (int32_t)Vb_sh[i * 2 + j];
            }
            Vt_sw[i] = temp;
        }
    }});

    41:vmsumshs({{
        for (auto i = 0; i < 4; i++) {
            int64_t temp = Vc_sw[i];
            for (auto j = 0; j < 2; j++) {
                temp +=
                    (int32_t)Va_sh[i * 2 + j] * (int32_t)Vb_sh[i * 2 + j];
            }
            bool sat;
            std::tie(temp, sat) = si32_CLAMP(temp);
            VSCR = VSCR | (sat & 0x10001);
            Vt_sw[i] = temp;
        }
    }});

    38:vmsumuhm({{
        for (auto i = 0; i < 4; i++) {
            uint64_t temp = Vc_uw[i];
            for (auto j = 0; j < 2; j++) {
                temp +=
                    (uint64_t)Va_uh[i * 2 + j] * (uint64_t)Vb_uh[i * 2 + j];
            }
            Vt_uw[i] = temp;
        }
    }});

    39:vmsumuhs({{
        for (auto i = 0; i < 4; i++) {
            uint64_t temp = Vc_uw[i];
            for (auto j = 0; j < 2; j++) {
                temp +=
                    (uint64_t)Va_uh[i * 2 + j] * (uint64_t)Vb_uh[i * 2 + j];
            }
            bool sat;
            std::tie(temp, sat) = ui32_CLAMP(temp);
            VSCR = VSCR | (sat & 0x10001);
            Vt_uw[i] = temp;
        }
    }});
}