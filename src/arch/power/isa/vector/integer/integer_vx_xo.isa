format VectorIntArithOp {
    384: vaddcuw({{
        for (auto i = 0; i < 4; i++) {
            Vt_uw[i] =
                ((uint64_t(Va_uw[i]) + uint64_t(Vb_uw[i]))
                >> 32);
        }
    }});
    
    320:vaddcuq({{
        __uint128_t sum1 = Va_uq[0] + Vb_uq[0];
        __uint128_t cin1 = (sum1 < Va_uq[0]) && (sum1 < (Vb_uq[0])) ? 1 :0;
        Vt_uq[0] = cin1;
    }});

    768:vaddsbs({{
        for (auto i = 0; i < 16; i++) {
            int16_t sum = Va_sb[i] + Vb_sb[i];
            bool sat;
            std::tie(sum, sat) = si8_CLAMP(sum);
            VSCR = VSCR | (sat & 0x10001);
            Vt_sb[i] = sum;
        }
    }});

    832:vaddshs({{
        for (auto i = 0; i < 8; i++) {
            int32_t sum = Va_sh[i] + Vb_sh[i];
            bool sat;
            std::tie(sum, sat) = si16_CLAMP(sum);
            VSCR = VSCR | (sat & 0x10001);
            Vt_sh[i] = sum;
        }
    }});

    896:vaddsws({{
        for (auto i = 0; i < 4; i++) {
            int64_t sum = (int64_t)Va_sw[i] + (int64_t)Vb_sw[i];
            bool sat;
            std::tie(sum, sat) = si32_CLAMP(sum);
            VSCR = VSCR | (sat & 0x10001);
            Vt_sw[i] = (int32_t)sum;
        }
    }});

    0:vaddubm({{
        for (auto i = 0; i < 16; i++) {
            Vt_ub[i] = Va_ub[i] + Vb_ub[i];
        }
    }});

    64:vadduhm({{
        for (auto i = 0; i < 8; i++) {
            Vt_uh[i] = Va_uh[i] + Vb_uh[i];
        }
    }});

    128:vadduwm({{
        for (auto i = 0; i < 4; i++) {
            Vt_uw[i] = Va_uw[i] + Vb_uw[i];
        }
    }});

    192:vaddudm({{
        for (auto i = 0; i < 2; i++) {
            Vt_ud[i] = Va_ud[i] + Vb_ud[i];
        }
    }});

    512:vaddubs({{
        for (auto i = 0; i < 16; i++) {
            uint16_t sum = Va_ub[i] + Vb_ub[i];
            bool sat;
            std::tie(sum, sat) = ui8_CLAMP(sum);
            VSCR = VSCR | (sat & 0x10001);
            Vt_ub[i] = sum;
        }
    }});

    576:vadduhs({{
        for (auto i = 0; i < 8; i++) {
            uint32_t sum = Va_uh[i] + Vb_uh[i];
            bool sat;
            std::tie(sum, sat) = ui16_CLAMP(sum);
            VSCR = VSCR | (sat & 0x10001);
            Vt_uh[i] = sum;
        }
    }});

    640:vadduws({{
        for (auto i = 0; i < 4; i++) {
            uint64_t sum = (uint64_t)Va_uw[i] + (uint64_t)Vb_uw[i];
            bool sat;
            std::tie(sum, sat) = ui32_CLAMP(sum);
            VSCR = VSCR | (sat & 0x10001);
            Vt_uw[i] = sum;
        }
    }});

    256:vadduqm({{
        Vt_uq[0] = Va_uq[0] + Vb_uq[0];
    }});

    1408:vsubcuw({{
        for (auto i = 0; i < 4; i++) {
            Vt_uw[i] =
                ((((uint64_t)Va_uw[i] - (uint64_t)Vb_uw[i]) >> 32) & 0x1)
                    ^ 0x1;
        }
    }});

	1792:vsubsbs({{
        for (auto i = 0; i < 16; i++) {
            int32_t sum = Va_sb[i] - Vb_sb[i];
            bool sat;
            std::tie(sum, sat) = si8_CLAMP(sum);
            VSCR = VSCR | (sat & 0x10001);
            Vt_sb[i] = sum;
        }
    }});

    1856:vsubshs({{
        for (auto i = 0; i < 8; i++) {
            int32_t sum = Va_sh[i] - Vb_sh[i];
            bool sat;
            std::tie(sum, sat) = si16_CLAMP(sum);
            VSCR = VSCR | (sat & 0x10001);
            Vt_sh[i] = sum;
        }
    }});

    1920:vsubsws({{
        for (auto i = 0; i < 4; i++) {
            int64_t sum = (int64_t)Va_sw[i] - (int64_t)Vb_sw[i];
            bool sat;
            std::tie(sum, sat) = si32_CLAMP(sum);
            VSCR = VSCR | (sat & 0x10001);
            Vt_sw[i] = sum;
        }
    }});

    1024:vsububm({{
        for (auto i = 0; i < 16; i++) {
            Vt_ub[i]  = Va_ub[i] - Vb_ub[i];
        }
    }});

    1088:vsubuhm({{
        for (auto i = 0; i < 8; i++) {
            Vt_uh[i]  = Va_uh[i] - Vb_uh[i];
        }
    }});

    1152:vsubuwm({{
        for (auto i = 0; i < 4; i++) {
            Vt_uw[i]  = Va_uw[i] - Vb_uw[i];
        }
    }});

    1216:vsubudm({{
        for (auto i = 0; i < 2; i++) {
            Vt_ud[i]  = Va_ud[i] - Vb_ud[i];
        }
    }});

    1536:vsububs({{
        for (auto i = 0; i < 16; i++) {
            uint16_t sum = (uint16_t)Va_ub[i] - (uint16_t)Vb_ub[i];
            bool sat;
            std::tie(sum, sat) = ui8_CLAMP(sum);
            VSCR = VSCR | (sat & 0x10001);
            Vt_ub[i] = sum;
        }
    }});

    1600:vsubuhs({{
        for (auto i = 0; i < 8; i++) {
            uint32_t sum = (uint32_t)Va_uh[i] - (uint32_t)Vb_uh[i];
            bool sat;
            std::tie(sum, sat) = ui16_CLAMP(sum);
            VSCR = VSCR | (sat & 0x10001);
            Vt_uh[i] = sum;
        }
    }});

    1664:vsubuws({{
        for (auto i = 0; i < 4; i++) {
            uint64_t sum = (uint64_t)Va_uw[i] - (uint64_t)Vb_uw[i];
            bool sat;
            std::tie(sum, sat) = ui32_CLAMP(sum);
            VSCR = VSCR | (sat & 0x10001);
            Vt_uw[i] = sum;
        }
    }});

    1280:vsubuqm({{
        Vt_uq[0] = Va_uq[0] - Vb_uq[0];
    }});
	
	1344:vsubcuq({{
        __uint128_t cin1 = Va_uq[0] < Vb_uq[0] ? 0:1;
        Vt_uq[0] = cin1;
    }});


    776:vmulesb({{
        for (auto i = 0; i < 8; i++) {
            Vt_sh[i] = (int16_t)Va_sb[i * 2 + 1] * (int16_t)Vb_sb[i * 2 + 1];
        }
    }});

    264:vmulosb({{
        for (auto i = 0; i < 8; i++) {
            Vt_sh[i] = (int16_t)Va_sb[i * 2] * (int16_t)Vb_sb[i * 2];
        }
    }});

    8:vmuloub({{
        for (auto i = 0; i < 8; i++) {
            Vt_uh[i] = (int16_t)Va_ub[i * 2] * (int16_t)Vb_ub[i * 2];
        }
    }});

    520:vmuleub({{
        for (auto i = 0; i < 8; i++) {
            Vt_uh[i] = (int16_t)Va_ub[i * 2 + 1] * (int16_t)Vb_ub[i * 2 + 1];
        }
    }});

    840:vmulesh({{
        for (auto i = 0; i < 4; i++) {
            Vt_sw[i] = (int32_t)Va_sh[i * 2 + 1] * (int32_t)Vb_sh[i * 2 + 1];
        }
    }});

    328:vmulosh({{
        for (auto i = 0; i < 4; i++) {
            Vt_sw[i] = (int32_t)Va_sh[i * 2] * (int32_t)Vb_sh[i * 2];
        }
    }});

    584:vmuleuh({{
        for (auto i = 0; i < 4; i++) {
            Vt_uw[i] = (int32_t)Va_uh[i * 2 + 1] * (int32_t)Vb_uh[i * 2 + 1];
        }
    }});

    72:vmulouh({{
        for (auto i = 0; i < 4; i++) {
            Vt_uw[i] = (int32_t)Va_uh[i * 2] * (int32_t)Vb_uh[i * 2];
        }
    }});

    904:vmulesw({{
        for (auto i = 0; i < 2; i++) {
            Vt_sd[i] = (int64_t)Va_sw[i * 2 + 1] * (int64_t)Vb_sw[i * 2 + 1];
        }
    }});

    392:vmulosw({{
        for (auto i = 0; i < 2; i++) {
            Vt_sd[i] = (int64_t)Va_sw[i * 2] * (int64_t)Vb_sw[i * 2];
        }
    }});

    648:vmuleuw({{
        for (auto i = 0; i < 2; i++) {
            Vt_ud[i] = (int64_t)Va_uw[i * 2 + 1] * (int64_t)Vb_uw[i * 2 + 1];
        }
    }});

    136:vmulouw({{
        for (auto i = 0; i < 2; i++) {
            Vt_ud[i] = (int64_t)Va_uw[i * 2] * (int64_t)Vb_uw[i * 2];
        }
    }});

    968:vmulesd({{ //ISA 3.1
        Vt_sq[0] = (int64_t)Va_sd[0 * 2 + 1] * (int64_t)Vb_sd[0 * 2 + 1];
    }});

    137:vmuluwm({{
        for (auto i = 0; i < 4; i++) {
            Vt_uw[i] = Va_uw[i] * Vb_uw[i];
        }
    }});

    1928:vsumsws({{
        int64_t temp = Vb_sw[0];
        for (auto i = 0; i < 4; i++) {
            temp += Va_sw[i];
        }

        bool sat;
        std::tie(temp, sat) = si32_CLAMP(temp);
        Vt_sw[0] = temp;
        Vt_sw[1] = 0x0;
        Vt_sw[2] = 0x0;
        Vt_sw[3] = 0x0;

        VSCR =  VSCR | (sat & 0x10001);
    }});

    1672:vsum2sws({{
        for (auto i = 0; i < 2; i++) {
            int64_t temp = Vb_sw[i * 2];
            for (auto j = 0; j < 2; j++) {
                temp += Va_sw[i * 2 + j];
            }
            bool sat;
            std::tie(temp, sat) = si32_CLAMP(temp);
            Vt_sw[i * 2] = temp;
            Vt_sw[i * 2 + 1] = 0x0;
            VSCR = VSCR | (sat & 0x10001);
        }
    }});

    1800:vsum4sbs({{
        for (auto i = 0; i < 4; i++) {
            int64_t temp = Vb_sw[i];
            for (auto j = 0; j < 4; j++) {
                temp += Va_sb[i * 4 + j];
            }
            bool sat;
            std::tie(temp, sat) = si32_CLAMP(temp);
            Vt_sw[i] = temp;
            VSCR = VSCR | (sat & 0x10001);
        }
    }});

    1608:vsum4shs({{
        for (auto i = 0; i < 4; i++) {
            int64_t temp = Vb_sw[i];
            for (auto j = 0; j < 2; j++) {
                temp += Va_sh[i * 2 + j];
            }
            bool sat;
            std::tie(temp, sat) = si32_CLAMP(temp);
            Vt_sw[i] = temp;
            VSCR = VSCR | (sat & 0x10001);
        }
    }});

    1544:vsum4ubs({{
        for (auto i = 0; i < 4; i++) {
            uint64_t temp = Vb_uw[i];
            for (auto j = 0; j < 4; j++) {
                temp += Va_ub[i * 4 + j];
            }
            bool sat;
            std::tie(temp, sat) = ui32_CLAMP(temp);
            Vt_uw[i] = temp;
            VSCR = VSCR | (sat & 0x10001);
        }
    }});

    1282:vavgsb({{
        for (auto i = 0; i < 16; i++) {
            Vt_sb[i] = (Va_sb[i] + Vb_sb[i] + 1) >> 1;
        }
    }});

    1026:vavgub({{
        for (auto i = 0; i < 16; i++) {
            Vt_ub[i] = (Va_ub[i] + Vb_ub[i] + 1) >> 1;
        }
    }});

    1346:vavgsh({{
        for (auto i = 0; i < 8; i++) {
            Vt_sh[i] = (Va_sh[i] + Vb_sh[i] + 1) >> 1;
        }
    }});

    1090:vavguh({{
        for (auto i = 0; i < 8; i++) {
            Vt_uh[i] = (Va_uh[i] + Vb_uh[i] + 1) >> 1;
        }
    }});

    1410:vavgsw({{
        for (auto i = 0; i < 4; i++) {
            Vt_sw[i] = ((uint64_t)Va_sw[i] + (uint64_t)Vb_sw[i] + 1) >> 1;
        }
    }});

    1154:vavguw({{
        for (auto i = 0; i < 4; i++) {
            Vt_uw[i] = ((int64_t)Va_uw[i] + (int64_t)Vb_uw[i] + 1) >> 1;
        }
    }});


    258:vmaxsb({{
        for (auto i = 0; i < 16; i++)
            Vt_sb[i] = (Va_sb[i] > Vb_sb[i]) ? Va_sb[i] : Vb_sb[i];
    }});
        
    2:vmaxub({{
        for (auto i = 0; i < 16; i++)
            Vt_ub[i] = (Va_ub[i] > Vb_ub[i]) ? Va_ub[i] : Vb_ub[i];
    }});
        
    322:vmaxsh({{
        for (auto i = 0; i < 8; i++)
            Vt_sh[i] = (Va_sh[i] > Vb_sh[i]) ? Va_sh[i] : Vb_sh[i];
    }});
        
    66:vmaxuh({{
        for (auto i = 0; i < 8; i++)
            Vt_uh[i] = (Va_uh[i] > Vb_uh[i]) ? Va_uh[i] : Vb_uh[i];
    }});
        
    386:vmaxsw({{
        for (auto i = 0; i < 4; i++)
            Vt_sw[i] = (Va_sw[i] > Vb_sw[i]) ? Va_sw[i] : Vb_sw[i];
    }});
        
    130:vmaxuw({{
        for (auto i = 0; i < 4; i++)
            Vt_uw[i] = (Va_uw[i] > Vb_uw[i]) ? Va_uw[i] : Vb_uw[i];
    }});
        
    450:vmaxsd({{
        for (auto i = 0; i < 2; i++)
            Vt_sd[i] = (Va_sd[i] > Vb_sd[i]) ? Va_sd[i] : Vb_sd[i];
    }});

    194:vmaxud({{
        for (auto i = 0; i < 2; i++)
            Vt_ud[i] = (Va_ud[i] > Vb_ud[i]) ? Va_ud[i] : Vb_ud[i];
    }});

    770:vminsb({{
        for (auto i = 0; i < 16; i++)
            Vt_sb[i] = (Va_sb[i] < Vb_sb[i]) ? Va_sb[i] : Vb_sb[i];
    }});
        
    514:vminub({{
        for (auto i = 0; i < 16; i++)
            Vt_ub[i] = (Va_ub[i] < Vb_ub[i]) ? Va_ub[i] : Vb_ub[i];
    }});
        
    834:vminsh({{
        for (auto i = 0; i < 8; i++)
            Vt_sh[i] = (Va_sh[i] < Vb_sh[i]) ? Va_sh[i] : Vb_sh[i];
    }});
        
    578:vminuh({{
        for (auto i = 0; i < 8; i++)
            Vt_uh[i] = (Va_uh[i] < Vb_uh[i]) ? Va_uh[i] : Vb_uh[i];
    }});
        
    898:vminsw({{
        for (auto i = 0; i < 4; i++)
            Vt_sw[i] = (Va_sw[i] < Vb_sw[i]) ? Va_sw[i] : Vb_sw[i];
    }});
        
    642:vminuw({{
        for (auto i = 0; i < 4; i++)
            Vt_uw[i] = (Va_uw[i] < Vb_uw[i]) ? Va_uw[i] : Vb_uw[i];
    }});
        
    962:vminsd({{
        for (auto i = 0; i < 2; i++)
            Vt_sd[i] = (Va_sd[i] < Vb_sd[i]) ? Va_sd[i] : Vb_sd[i];
    }});

    706:vminud({{
        for (auto i = 0; i < 2; i++)
            Vt_ud[i] = (Va_ud[i] < Vb_ud[i]) ? Va_ud[i] : Vb_ud[i];
    }});

    1028:vand({{
        Vt_uq[0] = Va_uq[0] & Vb_uq[0];
    }});
        
    1092:vandc({{
        Vt_uq[0] = Va_uq[0] & ~Vb_uq[0];
    }});

    1668:veqv({{
        Vt_uq[0] = ~(Va_uq[0] ^ Vb_uq[0]);
    }});

    1412:vnand({{
        Vt_uq[0] = ~(Va_uq[0] & Vb_uq[0]);
    }});

    1156:vor({{
        Vt_uq[0] = Va_uq[0] | Vb_uq[0];
    }});

    1348:vorc({{
        Vt_uq[0] = Va_uq[0] | ~Vb_uq[0];
    }});

    1284:vnor({{
        Vt_uq[0] = ~(Va_uq[0] | Vb_uq[0]);
    }});

    1220:vxor({{
        Vt_uq[0] = Va_uq[0] ^ Vb_uq[0];
    }}); 

    4:vrlb({{
        uint8_t mask = 0x07;
        for (auto i = 0; i < 16; i++)
            Vt_ub[i] = (Va_ub[i] << (Vb_ub[i] & mask)) | (Va_ub[i] >> (8 - (Vb_ub[i] & mask)));
    }}); 
  
    68:vrlh({{
        uint16_t mask = 0x000f;
        for (auto i = 0; i < 8; i++)
            Vt_uh[i] = (Va_uh[i] << (Vb_uh[i] & mask)) | (Va_uh[i] >> (16 - (Vb_uh[i] & mask)));
    }}); 

    132:vrlw({{
        uint32_t mask = 0x0000001f;
        for (auto i = 0; i < 4; i++)
            Vt_uw[i] = (Va_uw[i] << (Vb_uw[i] & mask)) | (Va_uw[i] >> (32 - (Vb_uw[i] & mask)));
    }}); 

    196:vrld({{
        uint64_t mask = 0x000000000000003f;
        for (auto i = 0; i < 2; i++)
            Vt_ud[i] = (Va_ud[i] << (Vb_ud[i] & mask)) | (Va_ud[i] >> (64 - (Vb_ud[i] & mask)));
    }}); 

    260:vslb({{
        uint8_t mask = 0x07;
        for (auto i = 0; i < 16; i++)
            Vt_ub[i] = (Va_ub[i] << (Vb_ub[i] & mask));
    }}); 

    324:vslh({{
        uint16_t mask = 0x000f;
        for (auto i = 0; i < 8; i++)
            Vt_uh[i] = (Va_uh[i] << (Vb_uh[i] & mask));
    }}); 

    388:vslw({{
        uint32_t mask = 0x0000001f;
        for (auto i = 0; i < 4; i++)
            Vt_uw[i] = (Va_uw[i] << (Vb_uw[i] & mask));
    }}); 

    1476:vsld({{
        uint64_t mask = 0x000000000000003f;
        for (auto i = 0; i < 2; i++)
            Vt_ud[i] = (Va_ud[i] << (Vb_ud[i] & mask));
    }}); 

 
    516:vsrb({{
        uint8_t mask = 0x07;
        for (auto i = 0; i < 16; i++)
            Vt_ub[i] = (Va_ub[i] >> (Vb_ub[i] & mask));
    }}); 

    580:vsrh({{
        uint16_t mask = 0x000f;
        for (auto i = 0; i < 8; i++)
            Vt_uh[i] = (Va_uh[i] >> (Vb_uh[i] & mask));
    }}); 

    644:vsrw({{
        uint32_t mask = 0x0000001f;
        for (auto i = 0; i < 4; i++)
            Vt_uw[i] = (Va_uw[i] >> (Vb_uw[i] & mask));
    }}); 

    1732:vsrd({{
        uint64_t mask = 0x000000000000003f;
        for (auto i = 0; i < 2; i++)
            Vt_ud[i] = (Va_ud[i] >> (Vb_ud[i] & mask));
    }}); 

    772:vsrab({{
        uint8_t mask = 0x07;
        for (auto i = 0; i < 16; i++)
            Vt_sb[i] = (Va_sb[i] >> (Vb_sb[i] & mask));
    }}); 

    836:vsrah({{
        uint16_t mask = 0x000f;
        for (auto i = 0; i < 8; i++)
            Vt_sh[i] = (Va_sh[i] >> (Vb_sh[i] & mask));
    }}); 

    900:vsraw({{
        uint32_t mask = 0x0000001f;
        for (auto i = 0; i < 4; i++)
            Vt_sw[i] = (Va_sw[i] >> (Vb_sw[i] & mask));
    }});  

    964:vsrad({{
        uint64_t mask = 0x000000000000003f;
        for (auto i = 0; i < 2; i++)
            Vt_sd[i] = (Va_sd[i] >> (Vb_sd[i] & mask));
    }});
}
