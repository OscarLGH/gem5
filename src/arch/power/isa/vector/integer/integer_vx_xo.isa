format IntArithOp {
    384: vaddcuw({{
        ThreadContext *tc = xc->tcBase();
        RegId src1_id(VecRegClass, VRA + 32);
        RegId src2_id(VecRegClass, VRB + 32);
        RegId dst_id(VecRegClass, VRT + 32);
        auto src1_reg = tc->readVecReg(src1_id);
        auto src1_val = src1_reg.as<uint32_t>();
        auto src2_reg = tc->readVecReg(src2_id);
        auto src2_val = src2_reg.as<uint32_t>();
        auto dst_reg = tc->readVecReg(dst_id);
        auto dst_val = dst_reg.as<uint32_t>();

        for (auto i = 0; i < 4; i++) {
            dst_val[i] =
                ((uint64_t(src1_val[i]) + uint64_t(src2_val[i]))
                >> 32);
        }

        tc->setVecReg(dst_id, dst_reg);
    }});
    
    320:vaddcuq({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<__uint128_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<__uint128_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<__uint128_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<__uint128_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 1; i++) {

            /* CODE SEG 2 */
            __uint128_t sum1 = vra_val[i] + vrb_val[i];
            __uint128_t cin1 = (sum1 < vra_val[i]) && (sum1 < (vrb_val[i])) ? 1 :0;
            vrt_val[i] = cin1;

            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    768:vaddsbs({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<int8_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<int8_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<int8_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<int8_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 16; i++) {

            /* CODE SEG 2 */
            int16_t sum = vra_val[i] + vrb_val[i];
            bool sat;
            std::tie(sum, sat) = si8_CLAMP(sum);
            uint64_t vscr = tc->readIntReg(INTREG_VSCR);
        vscr |= (sat & 0x10001);
        tc->setIntReg(INTREG_VSCR, vscr);
            vrt_val[i] = sum;

            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    832:vaddshs({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<int16_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<int16_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<int16_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<int16_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 8; i++) {

            /* CODE SEG 2 */
            int32_t sum = vra_val[i] + vrb_val[i];
            bool sat;
            std::tie(sum, sat) = si16_CLAMP(sum);
            uint64_t vscr = tc->readIntReg(INTREG_VSCR);
        vscr |= (sat & 0x10001);
        tc->setIntReg(INTREG_VSCR, vscr);
            vrt_val[i] = sum;
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    896:vaddsws({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<int32_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<int32_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<int32_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<int32_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 4; i++) {

            /* CODE SEG 2 */
            int64_t sum = (int64_t)vra_val[i] + (int64_t)vrb_val[i];
            bool sat;
            std::tie(sum, sat) = si32_CLAMP(sum);
            uint64_t vscr = tc->readIntReg(INTREG_VSCR);
        vscr |= (sat & 0x10001);
        tc->setIntReg(INTREG_VSCR, vscr);
            vrt_val[i] = (int32_t)sum;

            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    0:vaddubm({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<uint8_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<uint8_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<uint8_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<uint8_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 16; i++) {

            /* CODE SEG 2 */
            vrt_val[i] = vra_val[i] + vrb_val[i];
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    64:vadduhm({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<uint16_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<uint16_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<uint16_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<uint16_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 8; i++) {

            /* CODE SEG 2 */
            vrt_val[i] = vra_val[i] + vrb_val[i];
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    128:vadduwm({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<uint32_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<uint32_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<uint32_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<uint32_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 4; i++) {

            /* CODE SEG 2 */
            vrt_val[i] = vra_val[i] + vrb_val[i];
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    192:vaddudm({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<uint64_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<uint64_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<uint64_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<uint64_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 2; i++) {

            /* CODE SEG 2 */
            vrt_val[i] = vra_val[i] + vrb_val[i];
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    512:vaddubs({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<uint8_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<uint8_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<uint8_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<uint8_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 16; i++) {

            /* CODE SEG 2 */
            uint16_t sum = vra_val[i] + vrb_val[i];
            bool sat;
            std::tie(sum, sat) = ui8_CLAMP(sum);
            uint64_t vscr = tc->readIntReg(INTREG_VSCR);
        vscr |= (sat & 0x10001);
        tc->setIntReg(INTREG_VSCR, vscr);
            vrt_val[i] = sum;
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    576:vadduhs({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<uint16_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<uint16_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<uint16_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<uint16_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 8; i++) {

            /* CODE SEG 2 */
            uint32_t sum = vra_val[i] + vrb_val[i];
            bool sat;
            std::tie(sum, sat) = ui16_CLAMP(sum);
            uint64_t vscr = tc->readIntReg(INTREG_VSCR);
        vscr |= (sat & 0x10001);
        tc->setIntReg(INTREG_VSCR, vscr);
            vrt_val[i] = sum;
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    640:vadduws({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<uint32_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<uint32_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<uint32_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<uint32_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 4; i++) {

            /* CODE SEG 2 */
            uint64_t sum = (uint64_t)vra_val[i] + (uint64_t)vrb_val[i];
            bool sat;
            std::tie(sum, sat) = ui32_CLAMP(sum);
            uint64_t vscr = tc->readIntReg(INTREG_VSCR);
        vscr |= (sat & 0x10001);
        tc->setIntReg(INTREG_VSCR, vscr);
            vrt_val[i] = sum;
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    256:vadduqm({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<__uint128_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<__uint128_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<__uint128_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<__uint128_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 1; i++) {

            /* CODE SEG 2 */
            vrt_val[i] = vra_val[i] + vrb_val[i];
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    1408:vsubcuw({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<uint32_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<uint32_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<uint32_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<uint32_t>();

        /*
        double check this!
unit test passed but inconsistent with spec pseudocode!
do i = 0 to 3
src1 ← EXTZ(VSR[VRA+32].word[i])
src2 ← EXTZ(¬VSR[VRB+32].word[i])
VSR[VRT+32].word[i] ← EXTZ32((src1+src2+1) >> 32)
end

For each integer value i from 0 to 3, do the following.
The unsigned integer value in word element i of
VSR[VRB+32] is subtracted from the unsigned
integer value in word element i in VSR[VRA+32].
The complement of the borrow out of bit 0 of the
32-bit difference is zero-extended to 32 bits and
placed into word element i of VSR[VRT+32].
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 4; i++) {

            /* CODE SEG 2 */
            vrt_val[i] = ((((uint64_t)vra_val[i] - (uint64_t)vrb_val[i]) >> 32) & 0x1) ^ 0x1;
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    1856:vsubshs({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<int16_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<int16_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<int16_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<int16_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 8; i++) {

            /* CODE SEG 2 */
            int32_t sum = vra_val[i] - vrb_val[i];
            bool sat;
            std::tie(sum, sat) = si16_CLAMP(sum);
            uint64_t vscr = tc->readIntReg(INTREG_VSCR);
        vscr |= (sat & 0x10001);
        tc->setIntReg(INTREG_VSCR, vscr);
            vrt_val[i] = sum;
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    1920:vsubsws({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<int32_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<int32_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<int32_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<int32_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 4; i++) {

            /* CODE SEG 2 */
            int64_t sum = (int64_t)vra_val[i] - (int64_t)vrb_val[i];
            bool sat;
            std::tie(sum, sat) = si32_CLAMP(sum);
            uint64_t vscr = tc->readIntReg(INTREG_VSCR);
        vscr |= (sat & 0x10001);
        tc->setIntReg(INTREG_VSCR, vscr);
            vrt_val[i] = sum;
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    1024:vsububm({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<uint8_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<uint8_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<uint8_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<uint8_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 16; i++) {

            /* CODE SEG 2 */
            vrt_val[i]  = vra_val[i] - vrb_val[i];
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    1088:vsubuhm({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<uint16_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<uint16_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<uint16_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<uint16_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 8; i++) {

            /* CODE SEG 2 */
            vrt_val[i]  = vra_val[i] - vrb_val[i];
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    1152:vsubuwm({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<uint32_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<uint32_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<uint32_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<uint32_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 4; i++) {

            /* CODE SEG 2 */
            vrt_val[i]  = vra_val[i] - vrb_val[i];
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    1216:vsubudm({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<uint64_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<uint64_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<uint64_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<uint64_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 2; i++) {

            /* CODE SEG 2 */
            vrt_val[i]  = vra_val[i] - vrb_val[i];
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    1536:vsububs({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<uint8_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<uint8_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<uint8_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<uint8_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 16; i++) {

            /* CODE SEG 2 */
            uint16_t sum = (uint16_t)vra_val[i] - (uint16_t)vrb_val[i];
            bool sat;
            std::tie(sum, sat) = ui8_CLAMP(sum);
            uint64_t vscr = tc->readIntReg(INTREG_VSCR);
        vscr |= (sat & 0x10001);
        tc->setIntReg(INTREG_VSCR, vscr);
            vrt_val[i] = sum;
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    1600:vsubuhs({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<uint16_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<uint16_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<uint16_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<uint16_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 8; i++) {

            /* CODE SEG 2 */
            uint32_t sum = (uint32_t)vra_val[i] - (uint32_t)vrb_val[i];
            bool sat;
            std::tie(sum, sat) = ui16_CLAMP(sum);
            uint64_t vscr = tc->readIntReg(INTREG_VSCR);
        vscr |= (sat & 0x10001);
        tc->setIntReg(INTREG_VSCR, vscr);
            vrt_val[i] = sum;
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    1664:vsubuws({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<uint32_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<uint32_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<uint32_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<uint32_t>();

        /*
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 4; i++) {

            /* CODE SEG 2 */
            uint64_t sum = (uint64_t)vra_val[i] - (uint64_t)vrb_val[i];
            bool sat;
            std::tie(sum, sat) = ui32_CLAMP(sum);
            uint64_t vscr = tc->readIntReg(INTREG_VSCR);
            vscr |= (sat & 0x10001);
            tc->setIntReg(INTREG_VSCR, vscr);
            vrt_val[i] = sum;
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    1280:vsubuqm({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<__uint128_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<__uint128_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<__uint128_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<__uint128_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 1; i++) {

            /* CODE SEG 2 */
            vrt_val[i] = vra_val[i] - vrb_val[i];
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    776:vmulesb({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<int8_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<int8_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<int8_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<int16_t>();

        /*
        double check this!!!
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 8; i++) {

            /* CODE SEG 2 */
            vrt_val[i] = (int16_t)vra_val[i * 2 + 1] * (int16_t)vrb_val[i * 2 + 1];
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    264:vmulosb({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<int8_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<int8_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<int8_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<int16_t>();

        /*
        double check this!!!
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 8; i++) {

            /* CODE SEG 2 */
            vrt_val[i] = (int16_t)vra_val[i * 2] * (int16_t)vrb_val[i * 2];
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    8:vmuloub({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<uint8_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<uint8_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<uint8_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<uint16_t>();

        /*
        double check this!!!
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 8; i++) {

            /* CODE SEG 2 */
            vrt_val[i] = (int16_t)vra_val[i * 2] * (int16_t)vrb_val[i * 2];
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    520:vmuleub({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<uint8_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<uint8_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<uint8_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<uint16_t>();

        /*
        double check this!!!
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 8; i++) {

            /* CODE SEG 2 */
            vrt_val[i] = (int16_t)vra_val[i * 2 + 1] * (int16_t)vrb_val[i * 2 + 1];
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    840:vmulesh({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<int16_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<int16_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<int16_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<int32_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 4; i++) {

            /* CODE SEG 2 */
            vrt_val[i] = (int32_t)vra_val[i * 2 + 1] * (int32_t)vrb_val[i * 2 + 1];
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    328:vmulosh({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<int16_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<int16_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<int16_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<int32_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 4; i++) {

            /* CODE SEG 2 */
            vrt_val[i] = (int32_t)vra_val[i * 2] * (int32_t)vrb_val[i * 2];
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    584:vmuleuh({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<uint16_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<uint16_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<uint16_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<uint32_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 4; i++) {

            /* CODE SEG 2 */
            vrt_val[i] = (int32_t)vra_val[i * 2 + 1] * (int32_t)vrb_val[i * 2 + 1];
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    72:vmulouh({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<uint16_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<uint16_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<uint16_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<uint32_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 4; i++) {

            /* CODE SEG 2 */
            vrt_val[i] = (int32_t)vra_val[i * 2] * (int32_t)vrb_val[i * 2];
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    904:vmulesw({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<int32_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<int32_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<int32_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<int64_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 2; i++) {

            /* CODE SEG 2 */
            vrt_val[i] = (int64_t)vra_val[i * 2 + 1] * (int64_t)vrb_val[i * 2 + 1];
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    392:vmulosw({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<int32_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<int32_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<int32_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<int64_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 2; i++) {

            /* CODE SEG 2 */
            vrt_val[i] = (int64_t)vra_val[i * 2] * (int64_t)vrb_val[i * 2];
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    648:vmuleuw({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<uint32_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<uint32_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<uint32_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<uint64_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 2; i++) {

            /* CODE SEG 2 */
            vrt_val[i] = (int64_t)vra_val[i * 2 + 1] * (int64_t)vrb_val[i * 2 + 1];
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    136:vmulouw({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<uint32_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<uint32_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<uint32_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<uint64_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 2; i++) {

            /* CODE SEG 2 */
            vrt_val[i] = (int64_t)vra_val[i * 2] * (int64_t)vrb_val[i * 2];
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    968:vmulesd({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<int64_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<int64_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<int64_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<__int128_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 1; i++) {

            /* CODE SEG 2 */
            vrt_val[i] = (int64_t)vra_val[i * 2 + 1] * (int64_t)vrb_val[i * 2 + 1];
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    137:vmuluwm({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<uint32_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<uint32_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<uint32_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<uint32_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 4; i++) {

            /* CODE SEG 2 */
            vrt_val[i] = vra_val[i] * vrb_val[i];
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    1928:vsumsws({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<int32_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<int32_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<int32_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<int32_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        int64_t temp = vrb_val[0];
        /* CODE SEG 1 END */

        for (auto i = 0; i < 4; i++) {

            /* CODE SEG 2 */
            temp += vra_val[i];
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        bool sat;
        vrt_val[3] = 0x0;
        vrt_val[1] = 0x0;
        vrt_val[2] = 0x0;
        std::tie(vrt_val[0], sat) = si32_CLAMP(temp);
        uint64_t vscr = tc->readIntReg(INTREG_VSCR);
        vscr |= (sat & 0x10001);
        tc->setIntReg(INTREG_VSCR, vscr);
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    1672:vsum2sws({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<int32_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<int32_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<int32_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<int32_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 2; i++) {

            /* CODE SEG 2 */
            int64_t temp = vrb_val[i * 2]; 
            for (auto j = 0; j < 2; j++) {
                temp += vra_val[i * 2 + j];
            }
            bool sat;
            vrt_val[i * 2 + 1] = 0x0;
            std::tie(vrt_val[i * 2], sat) = si32_CLAMP(temp);
            uint64_t vscr = tc->readIntReg(INTREG_VSCR);
        vscr |= (sat & 0x10001);
        tc->setIntReg(INTREG_VSCR, vscr);
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    1800:vsum4sbs({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<int8_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<int32_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<int32_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<int32_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 4; i++) {

            /* CODE SEG 2 */
            int64_t temp = vrb_val[i]; 
            for (auto j = 0; j < 4; j++) {
                temp += vra_val[i * 4 + j];
            }
            bool sat;
            vrt_val[i * 2 + 1] = 0x0;
            std::tie(vrt_val[i], sat) = si32_CLAMP(temp);
            uint64_t vscr = tc->readIntReg(INTREG_VSCR);
        vscr |= (sat & 0x10001);
        tc->setIntReg(INTREG_VSCR, vscr);
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    1608:vsum4shs({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<int16_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<int32_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<int32_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<int32_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 4; i++) {

            /* CODE SEG 2 */
            int64_t temp = vrb_val[i]; 
            for (auto j = 0; j < 2; j++) {
                temp += vra_val[i * 2 + j];
            }
            bool sat;
            std::tie(vrt_val[i], sat) = si32_CLAMP(temp);
            uint64_t vscr = tc->readIntReg(INTREG_VSCR);
        vscr |= (sat & 0x10001);
        tc->setIntReg(INTREG_VSCR, vscr);
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    1544:vsum4ubs({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<uint8_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<uint32_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<uint32_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<uint32_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 4; i++) {

            /* CODE SEG 2 */
            uint64_t temp = vrb_val[i]; 
            for (auto j = 0; j < 4; j++) {
                temp += vra_val[i * 4 + j];
            }
            bool sat;
            std::tie(vrt_val[i], sat) = ui32_CLAMP(temp);
            uint64_t vscr = tc->readIntReg(INTREG_VSCR);
        vscr |= (sat & 0x10001);
        tc->setIntReg(INTREG_VSCR, vscr);
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    1282:vavgsb({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<int8_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<int8_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<int8_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<int8_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 16; i++) {

            /* CODE SEG 2 */
            vrt_val[i] = (vra_val[i] + vrb_val[i] + 1) >> 1;
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    1026:vavgub({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<uint8_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<uint8_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<uint8_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<uint8_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 16; i++) {

            /* CODE SEG 2 */
            vrt_val[i] = (vra_val[i] + vrb_val[i] + 1) >> 1;
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    1346:vavgsh({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<int16_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<int16_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<int16_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<int16_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 8; i++) {

            /* CODE SEG 2 */
            vrt_val[i] = (vra_val[i] + vrb_val[i] + 1) >> 1;
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    1090:vavguh({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<uint16_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<uint16_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<uint16_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<uint16_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 8; i++) {

            /* CODE SEG 2 */
            vrt_val[i] = (vra_val[i] + vrb_val[i] + 1) >> 1;
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    1410:vavgsw({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<int32_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<int32_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<int32_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<int32_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 4; i++) {

            /* CODE SEG 2 */
            vrt_val[i] = ((uint64_t)vra_val[i] + (uint64_t)vrb_val[i] + 1) >> 1;
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    1154:vavguw({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, VRA + 32);
        RegId vrb_id(VecRegClass, VRB + 32);
        RegId vrc_id(VecRegClass, VRC + 32);
        RegId vrt_id(VecRegClass, VRT + 32);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<uint32_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<uint32_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<uint32_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<uint32_t>();

        /*
        //comment
        */

        /* CODE SEG 1 */
        //code seg 1
        /* CODE SEG 1 END */

        for (auto i = 0; i < 4; i++) {

            /* CODE SEG 2 */
            vrt_val[i] = ((int64_t)vra_val[i] + (int64_t)vrb_val[i] + 1) >> 1;
            /* CODE SEG 2 END */
        }

        /* CODE SEG 3 */
        //code seg 3
        /* CODE SEG 3 END */

        tc->setVecReg(vrt_id, vrt_reg);
    }});

    258:vmaxsb({{
		ThreadContext *tc = xc->tcBase();
		RegId vra_id(VecRegClass, VRA + 32);
		RegId vrb_id(VecRegClass, VRB + 32);
		RegId vrt_id(VecRegClass, VRT + 32);
		auto vra_reg = tc->readVecReg(vra_id); auto vra_val = vra_reg.as<int8_t>();
		auto vrb_reg = tc->readVecReg(vrb_id); auto vrb_val = vrb_reg.as<int8_t>();
		auto vrt_reg = tc->readVecReg(vrt_id); auto vrt_val = vrt_reg.as<int8_t>();
		for (auto i = 0; i < 16; i++) {
			if (vra_val[i] > vrb_val[i])
				vrt_val[i] = vra_val[i];
			else
				vrt_val[i] = vrb_val[i];
		}
		tc->setVecReg(vrt_id, vrt_reg);
	}});
		
	2:vmaxub({{
		ThreadContext *tc = xc->tcBase();
		RegId vra_id(VecRegClass, VRA + 32);
		RegId vrb_id(VecRegClass, VRB + 32);
		RegId vrt_id(VecRegClass, VRT + 32);
		auto vra_reg = tc->readVecReg(vra_id); auto vra_val = vra_reg.as<uint8_t>();
		auto vrb_reg = tc->readVecReg(vrb_id); auto vrb_val = vrb_reg.as<uint8_t>();
		auto vrt_reg = tc->readVecReg(vrt_id); auto vrt_val = vrt_reg.as<uint8_t>();
		for (auto i = 0; i < 16; i++) {
			if (vra_val[i] > vrb_val[i])
				vrt_val[i] = vra_val[i];
			else
				vrt_val[i] = vrb_val[i];
		}
		tc->setVecReg(vrt_id, vrt_reg);
	}});
		
	322:vmaxsh({{
		ThreadContext *tc = xc->tcBase();
		RegId vra_id(VecRegClass, VRA + 32);
		RegId vrb_id(VecRegClass, VRB + 32);
		RegId vrt_id(VecRegClass, VRT + 32);
		auto vra_reg = tc->readVecReg(vra_id); auto vra_val = vra_reg.as<int16_t>();
		auto vrb_reg = tc->readVecReg(vrb_id); auto vrb_val = vrb_reg.as<int16_t>();
		auto vrt_reg = tc->readVecReg(vrt_id); auto vrt_val = vrt_reg.as<int16_t>();
		for (auto i = 0; i < 8; i++) {
			if (vra_val[i] > vrb_val[i])
				vrt_val[i] = vra_val[i];
			else
				vrt_val[i] = vrb_val[i];
		}
		tc->setVecReg(vrt_id, vrt_reg);
	}});
		
	66:vmaxuh({{
		ThreadContext *tc = xc->tcBase();
		RegId vra_id(VecRegClass, VRA + 32);
		RegId vrb_id(VecRegClass, VRB + 32);
		RegId vrt_id(VecRegClass, VRT + 32);
		auto vra_reg = tc->readVecReg(vra_id); auto vra_val = vra_reg.as<uint16_t>();
		auto vrb_reg = tc->readVecReg(vrb_id); auto vrb_val = vrb_reg.as<uint16_t>();
		auto vrt_reg = tc->readVecReg(vrt_id); auto vrt_val = vrt_reg.as<uint16_t>();
		for (auto i = 0; i < 8; i++) {
			if (vra_val[i] > vrb_val[i])
				vrt_val[i] = vra_val[i];
			else
				vrt_val[i] = vrb_val[i];
		}
		tc->setVecReg(vrt_id, vrt_reg);
	}});
		
	386:vmaxsw({{
		ThreadContext *tc = xc->tcBase();
		RegId vra_id(VecRegClass, VRA + 32);
		RegId vrb_id(VecRegClass, VRB + 32);
		RegId vrt_id(VecRegClass, VRT + 32);
		auto vra_reg = tc->readVecReg(vra_id); auto vra_val = vra_reg.as<int32_t>();
		auto vrb_reg = tc->readVecReg(vrb_id); auto vrb_val = vrb_reg.as<int32_t>();
		auto vrt_reg = tc->readVecReg(vrt_id); auto vrt_val = vrt_reg.as<int32_t>();
		for (auto i = 0; i < 4; i++) {
			if (vra_val[i] > vrb_val[i])
				vrt_val[i] = vra_val[i];
			else
				vrt_val[i] = vrb_val[i];
		}
		tc->setVecReg(vrt_id, vrt_reg);
	}});
		
	130:vmaxuw({{
		ThreadContext *tc = xc->tcBase();
		RegId vra_id(VecRegClass, VRA + 32);
		RegId vrb_id(VecRegClass, VRB + 32);
		RegId vrt_id(VecRegClass, VRT + 32);
		auto vra_reg = tc->readVecReg(vra_id); auto vra_val = vra_reg.as<uint32_t>();
		auto vrb_reg = tc->readVecReg(vrb_id); auto vrb_val = vrb_reg.as<uint32_t>();
		auto vrt_reg = tc->readVecReg(vrt_id); auto vrt_val = vrt_reg.as<uint32_t>();
		for (auto i = 0; i < 4; i++) {
			if (vra_val[i] > vrb_val[i])
				vrt_val[i] = vra_val[i];
			else
				vrt_val[i] = vrb_val[i];
		}
		tc->setVecReg(vrt_id, vrt_reg);
	}});
		
	450:vmaxsd({{
		ThreadContext *tc = xc->tcBase();
		RegId vra_id(VecRegClass, VRA + 32);
		RegId vrb_id(VecRegClass, VRB + 32);
		RegId vrt_id(VecRegClass, VRT + 32);
		auto vra_reg = tc->readVecReg(vra_id); auto vra_val = vra_reg.as<int64_t>();
		auto vrb_reg = tc->readVecReg(vrb_id); auto vrb_val = vrb_reg.as<int64_t>();
		auto vrt_reg = tc->readVecReg(vrt_id); auto vrt_val = vrt_reg.as<int64_t>();
		for (auto i = 0; i < 2; i++) {
			if (vra_val[i] > vrb_val[i])
				vrt_val[i] = vra_val[i];
			else
				vrt_val[i] = vrb_val[i];
		}
		tc->setVecReg(vrt_id, vrt_reg);
	}});

	194:vmaxud({{
		ThreadContext *tc = xc->tcBase();
		RegId vra_id(VecRegClass, VRA + 32);
		RegId vrb_id(VecRegClass, VRB + 32);
		RegId vrt_id(VecRegClass, VRT + 32);
		auto vra_reg = tc->readVecReg(vra_id); auto vra_val = vra_reg.as<uint64_t>();
		auto vrb_reg = tc->readVecReg(vrb_id); auto vrb_val = vrb_reg.as<uint64_t>();
		auto vrt_reg = tc->readVecReg(vrt_id); auto vrt_val = vrt_reg.as<uint64_t>();
		for (auto i = 0; i < 2; i++) {
			if (vra_val[i] > vrb_val[i])
				vrt_val[i] = vra_val[i];
			else
				vrt_val[i] = vrb_val[i];
		}
		tc->setVecReg(vrt_id, vrt_reg);
	}});

	770:vminsb({{
		ThreadContext *tc = xc->tcBase();
		RegId vra_id(VecRegClass, VRA + 32);
		RegId vrb_id(VecRegClass, VRB + 32);
		RegId vrt_id(VecRegClass, VRT + 32);
		auto vra_reg = tc->readVecReg(vra_id); auto vra_val = vra_reg.as<int8_t>();
		auto vrb_reg = tc->readVecReg(vrb_id); auto vrb_val = vrb_reg.as<int8_t>();
		auto vrt_reg = tc->readVecReg(vrt_id); auto vrt_val = vrt_reg.as<int8_t>();
		for (auto i = 0; i < 16; i++) {
			if (vra_val[i] < vrb_val[i])
				vrt_val[i] = vra_val[i];
			else
				vrt_val[i] = vrb_val[i];
		}
		tc->setVecReg(vrt_id, vrt_reg);
	}});
		
	514:vminub({{
		ThreadContext *tc = xc->tcBase();
		RegId vra_id(VecRegClass, VRA + 32);
		RegId vrb_id(VecRegClass, VRB + 32);
		RegId vrt_id(VecRegClass, VRT + 32);
		auto vra_reg = tc->readVecReg(vra_id); auto vra_val = vra_reg.as<uint8_t>();
		auto vrb_reg = tc->readVecReg(vrb_id); auto vrb_val = vrb_reg.as<uint8_t>();
		auto vrt_reg = tc->readVecReg(vrt_id); auto vrt_val = vrt_reg.as<uint8_t>();
		for (auto i = 0; i < 16; i++) {
			if (vra_val[i] < vrb_val[i])
				vrt_val[i] = vra_val[i];
			else
				vrt_val[i] = vrb_val[i];
		}
		tc->setVecReg(vrt_id, vrt_reg);
	}});
		
	834:vminsh({{
		ThreadContext *tc = xc->tcBase();
		RegId vra_id(VecRegClass, VRA + 32);
		RegId vrb_id(VecRegClass, VRB + 32);
		RegId vrt_id(VecRegClass, VRT + 32);
		auto vra_reg = tc->readVecReg(vra_id); auto vra_val = vra_reg.as<int16_t>();
		auto vrb_reg = tc->readVecReg(vrb_id); auto vrb_val = vrb_reg.as<int16_t>();
		auto vrt_reg = tc->readVecReg(vrt_id); auto vrt_val = vrt_reg.as<int16_t>();
		for (auto i = 0; i < 8; i++) {
			if (vra_val[i] < vrb_val[i])
				vrt_val[i] = vra_val[i];
			else
				vrt_val[i] = vrb_val[i];
		}
		tc->setVecReg(vrt_id, vrt_reg);
	}});
		
	578:vminuh({{
		ThreadContext *tc = xc->tcBase();
		RegId vra_id(VecRegClass, VRA + 32);
		RegId vrb_id(VecRegClass, VRB + 32);
		RegId vrt_id(VecRegClass, VRT + 32);
		auto vra_reg = tc->readVecReg(vra_id); auto vra_val = vra_reg.as<uint16_t>();
		auto vrb_reg = tc->readVecReg(vrb_id); auto vrb_val = vrb_reg.as<uint16_t>();
		auto vrt_reg = tc->readVecReg(vrt_id); auto vrt_val = vrt_reg.as<uint16_t>();
		for (auto i = 0; i < 8; i++) {
			if (vra_val[i] < vrb_val[i])
				vrt_val[i] = vra_val[i];
			else
				vrt_val[i] = vrb_val[i];
		}
		tc->setVecReg(vrt_id, vrt_reg);
	}});
		
	898:vminsw({{
		ThreadContext *tc = xc->tcBase();
		RegId vra_id(VecRegClass, VRA + 32);
		RegId vrb_id(VecRegClass, VRB + 32);
		RegId vrt_id(VecRegClass, VRT + 32);
		auto vra_reg = tc->readVecReg(vra_id); auto vra_val = vra_reg.as<int32_t>();
		auto vrb_reg = tc->readVecReg(vrb_id); auto vrb_val = vrb_reg.as<int32_t>();
		auto vrt_reg = tc->readVecReg(vrt_id); auto vrt_val = vrt_reg.as<int32_t>();
		for (auto i = 0; i < 4; i++) {
			if (vra_val[i] < vrb_val[i])
				vrt_val[i] = vra_val[i];
			else
				vrt_val[i] = vrb_val[i];
		}
		tc->setVecReg(vrt_id, vrt_reg);
	}});
		
	642:vminuw({{
		ThreadContext *tc = xc->tcBase();
		RegId vra_id(VecRegClass, VRA + 32);
		RegId vrb_id(VecRegClass, VRB + 32);
		RegId vrt_id(VecRegClass, VRT + 32);
		auto vra_reg = tc->readVecReg(vra_id); auto vra_val = vra_reg.as<uint32_t>();
		auto vrb_reg = tc->readVecReg(vrb_id); auto vrb_val = vrb_reg.as<uint32_t>();
		auto vrt_reg = tc->readVecReg(vrt_id); auto vrt_val = vrt_reg.as<uint32_t>();
		for (auto i = 0; i < 4; i++) {
			if (vra_val[i] < vrb_val[i])
				vrt_val[i] = vra_val[i];
			else
				vrt_val[i] = vrb_val[i];
		}
		tc->setVecReg(vrt_id, vrt_reg);
	}});
		
	962:vminsd({{
		ThreadContext *tc = xc->tcBase();
		RegId vra_id(VecRegClass, VRA + 32);
		RegId vrb_id(VecRegClass, VRB + 32);
		RegId vrt_id(VecRegClass, VRT + 32);
		auto vra_reg = tc->readVecReg(vra_id); auto vra_val = vra_reg.as<int64_t>();
		auto vrb_reg = tc->readVecReg(vrb_id); auto vrb_val = vrb_reg.as<int64_t>();
		auto vrt_reg = tc->readVecReg(vrt_id); auto vrt_val = vrt_reg.as<int64_t>();
		for (auto i = 0; i < 2; i++) {
			if (vra_val[i] < vrb_val[i])
				vrt_val[i] = vra_val[i];
			else
				vrt_val[i] = vrb_val[i];
		}
		tc->setVecReg(vrt_id, vrt_reg);
	}});

	706:vminud({{
		ThreadContext *tc = xc->tcBase();
		RegId vra_id(VecRegClass, VRA + 32);
		RegId vrb_id(VecRegClass, VRB + 32);
		RegId vrt_id(VecRegClass, VRT + 32);
		auto vra_reg = tc->readVecReg(vra_id); auto vra_val = vra_reg.as<uint64_t>();
		auto vrb_reg = tc->readVecReg(vrb_id); auto vrb_val = vrb_reg.as<uint64_t>();
		auto vrt_reg = tc->readVecReg(vrt_id); auto vrt_val = vrt_reg.as<uint64_t>();
		for (auto i = 0; i < 2; i++) {
			if (vra_val[i] < vrb_val[i])
				vrt_val[i] = vra_val[i];
			else
				vrt_val[i] = vrb_val[i];
		}
		tc->setVecReg(vrt_id, vrt_reg);
	}});


	1028:vand({{
		// TODO if (MSR.VEC == 0) ???
		ThreadContext *tc = xc->tcBase();
		RegId vra_id(VecRegClass, VRA + 32);
		RegId vrb_id(VecRegClass, VRB + 32);
		RegId vrt_id(VecRegClass, VRT + 32);
		auto vra_reg = tc->readVecReg(vra_id); auto vra_val = vra_reg.as<uint64_t>();
		auto vrb_reg = tc->readVecReg(vrb_id); auto vrb_val = vrb_reg.as<uint64_t>();
		auto vrt_reg = tc->readVecReg(vrt_id); auto vrt_val = vrt_reg.as<uint64_t>();

		for (auto i = 0; i < 2; i++) {
			vrt_val[i] = vra_val[i] & vrb_val[i];
		}

		tc->setVecReg(vrt_id, vrt_reg);
	}});
		
	1092:vandc({{
		// TODO if (MSR.VEC == 0) ???
		ThreadContext *tc = xc->tcBase();
		RegId vra_id(VecRegClass, VRA + 32);
		RegId vrb_id(VecRegClass, VRB + 32);
		RegId vrt_id(VecRegClass, VRT + 32);
		auto vra_reg = tc->readVecReg(vra_id); auto vra_val = vra_reg.as<uint64_t>();
		auto vrb_reg = tc->readVecReg(vrb_id); auto vrb_val = vrb_reg.as<uint64_t>();
		auto vrt_reg = tc->readVecReg(vrt_id); auto vrt_val = vrt_reg.as<uint64_t>();

		vrt_val[0] = vra_val[0] & ~vrb_val[0];
		vrt_val[1] = vra_val[1] & ~vrb_val[1];

		tc->setVecReg(vrt_id, vrt_reg);
	}});

	1668:veqv({{
		// TODO if (MSR.VEC == 0) ???
		ThreadContext *tc = xc->tcBase();
		RegId vra_id(VecRegClass, VRA + 32);
		RegId vrb_id(VecRegClass, VRB + 32);
		RegId vrt_id(VecRegClass, VRT + 32);
		auto vra_reg = tc->readVecReg(vra_id); auto vra_val = vra_reg.as<uint64_t>();
		auto vrb_reg = tc->readVecReg(vrb_id); auto vrb_val = vrb_reg.as<uint64_t>();
		auto vrt_reg = tc->readVecReg(vrt_id); auto vrt_val = vrt_reg.as<uint64_t>();

		vrt_val[0] = ~(vra_val[0] ^ vrb_val[0]);
		vrt_val[1] = ~(vra_val[1] ^ vrb_val[1]);

		tc->setVecReg(vrt_id, vrt_reg);
	}});

	1412:vnand({{
		// TODO if (MSR.VEC == 0) ???
		ThreadContext *tc = xc->tcBase();
		RegId vra_id(VecRegClass, VRA + 32);
		RegId vrb_id(VecRegClass, VRB + 32);
		RegId vrt_id(VecRegClass, VRT + 32);
		auto vra_reg = tc->readVecReg(vra_id); auto vra_val = vra_reg.as<uint64_t>();
		auto vrb_reg = tc->readVecReg(vrb_id); auto vrb_val = vrb_reg.as<uint64_t>();
		auto vrt_reg = tc->readVecReg(vrt_id); auto vrt_val = vrt_reg.as<uint64_t>();

		vrt_val[0] = ~(vra_val[0] & vrb_val[0]);
		vrt_val[1] = ~(vra_val[1] & vrb_val[1]);

		tc->setVecReg(vrt_id, vrt_reg);
	}});

	1156:vor({{
		// TODO if (MSR.VEC == 0) ???
		ThreadContext *tc = xc->tcBase();
		RegId vra_id(VecRegClass, VRA + 32);
		RegId vrb_id(VecRegClass, VRB + 32);
		RegId vrt_id(VecRegClass, VRT + 32);
		auto vra_reg = tc->readVecReg(vra_id); auto vra_val = vra_reg.as<uint64_t>();
		auto vrb_reg = tc->readVecReg(vrb_id); auto vrb_val = vrb_reg.as<uint64_t>();
		auto vrt_reg = tc->readVecReg(vrt_id); auto vrt_val = vrt_reg.as<uint64_t>();

		vrt_val[0] = vra_val[0] | vrb_val[0];
		vrt_val[1] = vra_val[1] | vrb_val[1];

		tc->setVecReg(vrt_id, vrt_reg);
	}});

	1348:vorc({{
		// TODO if (MSR.VEC == 0) ???
		ThreadContext *tc = xc->tcBase();
		RegId vra_id(VecRegClass, VRA + 32);
		RegId vrb_id(VecRegClass, VRB + 32);
		RegId vrt_id(VecRegClass, VRT + 32);
		auto vra_reg = tc->readVecReg(vra_id); auto vra_val = vra_reg.as<uint64_t>();
		auto vrb_reg = tc->readVecReg(vrb_id); auto vrb_val = vrb_reg.as<uint64_t>();
		auto vrt_reg = tc->readVecReg(vrt_id); auto vrt_val = vrt_reg.as<uint64_t>();

		vrt_val[0] = vra_val[0] | ~vrb_val[0];
		vrt_val[1] = vra_val[1] | ~vrb_val[1];

		tc->setVecReg(vrt_id, vrt_reg);
	}});

	1284:vnor({{
		// TODO if (MSR.VEC == 0) ???
		ThreadContext *tc = xc->tcBase();
		RegId vra_id(VecRegClass, VRA + 32);
		RegId vrb_id(VecRegClass, VRB + 32);
		RegId vrt_id(VecRegClass, VRT + 32);
		auto vra_reg = tc->readVecReg(vra_id); auto vra_val = vra_reg.as<uint64_t>();
		auto vrb_reg = tc->readVecReg(vrb_id); auto vrb_val = vrb_reg.as<uint64_t>();
		auto vrt_reg = tc->readVecReg(vrt_id); auto vrt_val = vrt_reg.as<uint64_t>();

		vrt_val[0] = ~(vra_val[0] | vrb_val[0]);
		vrt_val[1] = ~(vra_val[1] | vrb_val[1]);

		tc->setVecReg(vrt_id, vrt_reg);
	}});

	1220:vxor({{
	// TODO if (MSR.VEC == 0) ???
		ThreadContext *tc = xc->tcBase();
		RegId vra_id(VecRegClass, VRA + 32);
		RegId vrb_id(VecRegClass, VRB + 32);
		RegId vrt_id(VecRegClass, VRT + 32);
		auto vra_reg = tc->readVecReg(vra_id); auto vra_val = vra_reg.as<uint64_t>();
		auto vrb_reg = tc->readVecReg(vrb_id); auto vrb_val = vrb_reg.as<uint64_t>();
		auto vrt_reg = tc->readVecReg(vrt_id); auto vrt_val = vrt_reg.as<uint64_t>();

		for (auto i = 0; i < 2; i++) {
			vrt_val[i] = vra_val[i] ^ vrb_val[i];
		}

		tc->setVecReg(vrt_id, vrt_reg);
	}}); 

	4:vrlb({{
	// TODO if (MSR.VEC == 0) ???
		ThreadContext *tc = xc->tcBase();
		RegId vra_id(VecRegClass, VRA + 32);
		RegId vrb_id(VecRegClass, VRB + 32);
		RegId vrt_id(VecRegClass, VRT + 32);
		auto vra_reg = tc->readVecReg(vra_id); auto vra_val = vra_reg.as<uint8_t>();
		auto vrb_reg = tc->readVecReg(vrb_id); auto vrb_val = vrb_reg.as<uint8_t>();
		auto vrt_reg = tc->readVecReg(vrt_id); auto vrt_val = vrt_reg.as<uint8_t>();

		uint8_t mask = 0x07;

		for (auto i = 0; i < 16; i++) {
			vrt_val[i] = (vra_val[i] << (vrb_val[i] & mask)) | (vra_val[i] >> (8 - (vrb_val[i] & mask)));
		}

		tc->setVecReg(vrt_id, vrt_reg);
	}}); 
  
	68:vrlh({{
	// TODO if (MSR.VEC == 0) ???
		ThreadContext *tc = xc->tcBase();
		RegId vra_id(VecRegClass, VRA + 32);
		RegId vrb_id(VecRegClass, VRB + 32);
		RegId vrt_id(VecRegClass, VRT + 32);
		auto vra_reg = tc->readVecReg(vra_id); auto vra_val = vra_reg.as<uint16_t>();
		auto vrb_reg = tc->readVecReg(vrb_id); auto vrb_val = vrb_reg.as<uint16_t>();
		auto vrt_reg = tc->readVecReg(vrt_id); auto vrt_val = vrt_reg.as<uint16_t>();

		uint16_t mask = 0x000f;

		for (auto i = 0; i < 8; i++) {
			vrt_val[i] = (vra_val[i] << (vrb_val[i] & mask)) | (vra_val[i] >> (16 - (vrb_val[i] & mask)));
		}

		tc->setVecReg(vrt_id, vrt_reg);
	}}); 

	132:vrlw({{
	// TODO if (MSR.VEC == 0) ???
		ThreadContext *tc = xc->tcBase();
		RegId vra_id(VecRegClass, VRA + 32);
		RegId vrb_id(VecRegClass, VRB + 32);
		RegId vrt_id(VecRegClass, VRT + 32);
		auto vra_reg = tc->readVecReg(vra_id); auto vra_val = vra_reg.as<uint32_t>();
		auto vrb_reg = tc->readVecReg(vrb_id); auto vrb_val = vrb_reg.as<uint32_t>();
		auto vrt_reg = tc->readVecReg(vrt_id); auto vrt_val = vrt_reg.as<uint32_t>();

		uint32_t mask = 0x0000001f;

		for (auto i = 0; i < 4; i++) {
			vrt_val[i] = (vra_val[i] << (vrb_val[i] & mask)) | (vra_val[i] >> (32 - (vrb_val[i] & mask)));
		}

		tc->setVecReg(vrt_id, vrt_reg);
	}}); 

	196:vrld({{
	// TODO if (MSR.VEC == 0) ???
		ThreadContext *tc = xc->tcBase();
		RegId vra_id(VecRegClass, VRA + 32);
		RegId vrb_id(VecRegClass, VRB + 32);
		RegId vrt_id(VecRegClass, VRT + 32);
		auto vra_reg = tc->readVecReg(vra_id); auto vra_val = vra_reg.as<uint64_t>();
		auto vrb_reg = tc->readVecReg(vrb_id); auto vrb_val = vrb_reg.as<uint64_t>();
		auto vrt_reg = tc->readVecReg(vrt_id); auto vrt_val = vrt_reg.as<uint64_t>();

		uint64_t mask = 0x000000000000003f;

		for (auto i = 0; i < 2; i++) {
			vrt_val[i] = (vra_val[i] << (vrb_val[i] & mask)) | (vra_val[i] >> (64 - (vrb_val[i] & mask)));
		}

		tc->setVecReg(vrt_id, vrt_reg);
	}}); 

	260:vslb({{
	// TODO if (MSR.VEC == 0) ???
		ThreadContext *tc = xc->tcBase();
		RegId vra_id(VecRegClass, VRA + 32);
		RegId vrb_id(VecRegClass, VRB + 32);
		RegId vrt_id(VecRegClass, VRT + 32);
		auto vra_reg = tc->readVecReg(vra_id); auto vra_val = vra_reg.as<uint8_t>();
		auto vrb_reg = tc->readVecReg(vrb_id); auto vrb_val = vrb_reg.as<uint8_t>();
		auto vrt_reg = tc->readVecReg(vrt_id); auto vrt_val = vrt_reg.as<uint8_t>();

		uint8_t mask = 0x07;

		for (auto i = 0; i < 16; i++) {
			vrt_val[i] = (vra_val[i] << (vrb_val[i] & mask));
		}

		tc->setVecReg(vrt_id, vrt_reg);
	}}); 

	324:vslh({{
	// TODO if (MSR.VEC == 0) ???
		ThreadContext *tc = xc->tcBase();
		RegId vra_id(VecRegClass, VRA + 32);
		RegId vrb_id(VecRegClass, VRB + 32);
		RegId vrt_id(VecRegClass, VRT + 32);
		auto vra_reg = tc->readVecReg(vra_id); auto vra_val = vra_reg.as<uint16_t>();
		auto vrb_reg = tc->readVecReg(vrb_id); auto vrb_val = vrb_reg.as<uint16_t>();
		auto vrt_reg = tc->readVecReg(vrt_id); auto vrt_val = vrt_reg.as<uint16_t>();

		uint16_t mask = 0x000f;

		for (auto i = 0; i < 8; i++) {
			vrt_val[i] = (vra_val[i] << (vrb_val[i] & mask));
		}

		tc->setVecReg(vrt_id, vrt_reg);
	}}); 

	388:vslw({{
	// TODO if (MSR.VEC == 0) ???
		ThreadContext *tc = xc->tcBase();
		RegId vra_id(VecRegClass, VRA + 32);
		RegId vrb_id(VecRegClass, VRB + 32);
		RegId vrt_id(VecRegClass, VRT + 32);
		auto vra_reg = tc->readVecReg(vra_id); auto vra_val = vra_reg.as<uint32_t>();
		auto vrb_reg = tc->readVecReg(vrb_id); auto vrb_val = vrb_reg.as<uint32_t>();
		auto vrt_reg = tc->readVecReg(vrt_id); auto vrt_val = vrt_reg.as<uint32_t>();

		uint32_t mask = 0x0000001f;

		for (auto i = 0; i < 4; i++) {
			vrt_val[i] = (vra_val[i] << (vrb_val[i] & mask));
		}

		tc->setVecReg(vrt_id, vrt_reg);
	}}); 

	1476:vsld({{
	// TODO if (MSR.VEC == 0) ???
		ThreadContext *tc = xc->tcBase();
		RegId vra_id(VecRegClass, VRA + 32);
		RegId vrb_id(VecRegClass, VRB + 32);
		RegId vrt_id(VecRegClass, VRT + 32);
		auto vra_reg = tc->readVecReg(vra_id); auto vra_val = vra_reg.as<uint64_t>();
		auto vrb_reg = tc->readVecReg(vrb_id); auto vrb_val = vrb_reg.as<uint64_t>();
		auto vrt_reg = tc->readVecReg(vrt_id); auto vrt_val = vrt_reg.as<uint64_t>();

		uint64_t mask = 0x000000000000003f;

		for (auto i = 0; i < 2; i++) {
			vrt_val[i] = (vra_val[i] << (vrb_val[i] & mask));
		}

		tc->setVecReg(vrt_id, vrt_reg);
	}}); 

 
	516:vsrb({{
	// TODO if (MSR.VEC == 0) ???
		ThreadContext *tc = xc->tcBase();
		RegId vra_id(VecRegClass, VRA + 32);
		RegId vrb_id(VecRegClass, VRB + 32);
		RegId vrt_id(VecRegClass, VRT + 32);
		auto vra_reg = tc->readVecReg(vra_id); auto vra_val = vra_reg.as<uint8_t>();
		auto vrb_reg = tc->readVecReg(vrb_id); auto vrb_val = vrb_reg.as<uint8_t>();
		auto vrt_reg = tc->readVecReg(vrt_id); auto vrt_val = vrt_reg.as<uint8_t>();

		uint8_t mask = 0x07;

		for (auto i = 0; i < 16; i++) {
			vrt_val[i] = (vra_val[i] >> (vrb_val[i] & mask));
		}

		tc->setVecReg(vrt_id, vrt_reg);
	}}); 

	580:vsrh({{
	// TODO if (MSR.VEC == 0) ???
		ThreadContext *tc = xc->tcBase();
		RegId vra_id(VecRegClass, VRA + 32);
		RegId vrb_id(VecRegClass, VRB + 32);
		RegId vrt_id(VecRegClass, VRT + 32);
		auto vra_reg = tc->readVecReg(vra_id); auto vra_val = vra_reg.as<uint16_t>();
		auto vrb_reg = tc->readVecReg(vrb_id); auto vrb_val = vrb_reg.as<uint16_t>();
		auto vrt_reg = tc->readVecReg(vrt_id); auto vrt_val = vrt_reg.as<uint16_t>();

		uint16_t mask = 0x000f;

		for (auto i = 0; i < 8; i++) {
			vrt_val[i] = (vra_val[i] >> (vrb_val[i] & mask));
		}

		tc->setVecReg(vrt_id, vrt_reg);
	}}); 

	644:vsrw({{
	// TODO if (MSR.VEC == 0) ???
		ThreadContext *tc = xc->tcBase();
		RegId vra_id(VecRegClass, VRA + 32);
		RegId vrb_id(VecRegClass, VRB + 32);
		RegId vrt_id(VecRegClass, VRT + 32);
		auto vra_reg = tc->readVecReg(vra_id); auto vra_val = vra_reg.as<uint32_t>();
		auto vrb_reg = tc->readVecReg(vrb_id); auto vrb_val = vrb_reg.as<uint32_t>();
		auto vrt_reg = tc->readVecReg(vrt_id); auto vrt_val = vrt_reg.as<uint32_t>();

		uint32_t mask = 0x0000001f;

		for (auto i = 0; i < 4; i++) {
			vrt_val[i] = (vra_val[i] >> (vrb_val[i] & mask));
		}

		tc->setVecReg(vrt_id, vrt_reg);
	}}); 

	1732:vsrd({{
	// TODO if (MSR.VEC == 0) ???
		ThreadContext *tc = xc->tcBase();
		RegId vra_id(VecRegClass, VRA + 32);
		RegId vrb_id(VecRegClass, VRB + 32);
		RegId vrt_id(VecRegClass, VRT + 32);
		auto vra_reg = tc->readVecReg(vra_id); auto vra_val = vra_reg.as<uint64_t>();
		auto vrb_reg = tc->readVecReg(vrb_id); auto vrb_val = vrb_reg.as<uint64_t>();
		auto vrt_reg = tc->readVecReg(vrt_id); auto vrt_val = vrt_reg.as<uint64_t>();

		uint64_t mask = 0x000000000000003f;

		for (auto i = 0; i < 2; i++) {
			vrt_val[i] = (vra_val[i] >> (vrb_val[i] & mask));
		}

		tc->setVecReg(vrt_id, vrt_reg);
	}}); 

	772:vsrab({{
	// TODO if (MSR.VEC == 0) ???
		ThreadContext *tc = xc->tcBase();
		RegId vra_id(VecRegClass, VRA + 32);
		RegId vrb_id(VecRegClass, VRB + 32);
		RegId vrt_id(VecRegClass, VRT + 32);
		auto vra_reg = tc->readVecReg(vra_id); auto vra_val = vra_reg.as<int8_t>();
		auto vrb_reg = tc->readVecReg(vrb_id); auto vrb_val = vrb_reg.as<int8_t>();
		auto vrt_reg = tc->readVecReg(vrt_id); auto vrt_val = vrt_reg.as<int8_t>();

		uint8_t mask = 0x07;

		for (auto i = 0; i < 16; i++) {
			vrt_val[i] = (vra_val[i] >> (vrb_val[i] & mask));
		}

		tc->setVecReg(vrt_id, vrt_reg);
	}}); 

	836:vsrah({{
	// TODO if (MSR.VEC == 0) ???
		ThreadContext *tc = xc->tcBase();
		RegId vra_id(VecRegClass, VRA + 32);
		RegId vrb_id(VecRegClass, VRB + 32);
		RegId vrt_id(VecRegClass, VRT + 32);
		auto vra_reg = tc->readVecReg(vra_id); auto vra_val = vra_reg.as<int16_t>();
		auto vrb_reg = tc->readVecReg(vrb_id); auto vrb_val = vrb_reg.as<int16_t>();
		auto vrt_reg = tc->readVecReg(vrt_id); auto vrt_val = vrt_reg.as<int16_t>();

		uint16_t mask = 0x000f;

		for (auto i = 0; i < 8; i++) {
			vrt_val[i] = (vra_val[i] >> (vrb_val[i] & mask));
		}

		tc->setVecReg(vrt_id, vrt_reg);
	}}); 
	900:vsraw({{
	// TODO if (MSR.VEC == 0) ???
		ThreadContext *tc = xc->tcBase();
		RegId vra_id(VecRegClass, VRA + 32);
		RegId vrb_id(VecRegClass, VRB + 32);
		RegId vrt_id(VecRegClass, VRT + 32);
		auto vra_reg = tc->readVecReg(vra_id); auto vra_val = vra_reg.as<int32_t>();
		auto vrb_reg = tc->readVecReg(vrb_id); auto vrb_val = vrb_reg.as<int32_t>();
		auto vrt_reg = tc->readVecReg(vrt_id); auto vrt_val = vrt_reg.as<int32_t>();

		uint32_t mask = 0x0000001f;

		for (auto i = 0; i < 4; i++) {
			vrt_val[i] = (vra_val[i] >> (vrb_val[i] & mask));
		}

		tc->setVecReg(vrt_id, vrt_reg);
	}});  

	964:vsrad({{
	// TODO if (MSR.VEC == 0) ???
		ThreadContext *tc = xc->tcBase();
		RegId vra_id(VecRegClass, VRA + 32);
		RegId vrb_id(VecRegClass, VRB + 32);
		RegId vrt_id(VecRegClass, VRT + 32);
		auto vra_reg = tc->readVecReg(vra_id); auto vra_val = vra_reg.as<int64_t>();
		auto vrb_reg = tc->readVecReg(vrb_id); auto vrb_val = vrb_reg.as<int64_t>();
		auto vrt_reg = tc->readVecReg(vrt_id); auto vrt_val = vrt_reg.as<int64_t>();

		uint64_t mask = 0x000000000000003f;

		for (auto i = 0; i < 2; i++) {
			vrt_val[i] = (vra_val[i] >> (vrb_val[i] & mask));
		}

		tc->setVecReg(vrt_id, vrt_reg);
	}});
}