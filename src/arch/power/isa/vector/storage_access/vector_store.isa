format StoreIndexOp {
    135: stvebx({{
        ThreadContext *tc = xc->tcBase();
        RegId id(VecRegClass, VRS + 32);
        auto reg = tc->readVecReg(id);
        auto val = reg.as<uint8_t>();
        Msr msr_v = tc->readIntReg(INTREG_MSR);
        if (msr_v.le) {
            Mem_ub = val[0];
        } else {
            Mem_ub = val[15];
        }
    }});

    167: stvehx({{
        ThreadContext *tc = xc->tcBase();
        RegId id(VecRegClass, VRS + 32);
        auto reg = tc->readVecReg(id);
        auto val = reg.as<uint16_t>();
        Msr msr_v = tc->readIntReg(INTREG_MSR);
        if (msr_v.le) {
            Mem_uh = val[0];
        } else {
            Mem_uh = val[7];
        }
    }});

    199: stvewx({{
        ThreadContext *tc = xc->tcBase();
        RegId id(VecRegClass, VRS + 32);
        auto reg = tc->readVecReg(id);
        auto val = reg.as<uint32_t>();
        Msr msr_v = tc->readIntReg(INTREG_MSR);
        if (msr_v.le) {
            Mem_uw = val[0];
        } else {
            Mem_uw = val[3];
        }
    }});

    231: stvx({{
        ThreadContext *tc = xc->tcBase();
        RegId id(VecRegClass, VRS + 32);
        auto reg = tc->readVecReg(id);
        auto val = reg.as<__uint128_t>();
        Mem_uq = val[0];
    }});

    487: stvxl({{
        ThreadContext *tc = xc->tcBase();
        RegId id(VecRegClass, VRS + 32);
        auto reg = tc->readVecReg(id);
        auto val = reg.as<__uint128_t>();
        Mem_uq = val[0];
    }});
}