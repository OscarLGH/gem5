// -*- mode:c++ -*-

// Copyright (c) 2009 The University of Edinburgh
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met: redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer;
// redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution;
// neither the name of the copyright holders nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

def operand_types {{
    'sb' : 'int8_t',
    'ub' : 'uint8_t',
    'sh' : 'int16_t',
    'uh' : 'uint16_t',
    'sw' : 'int32_t',
    'uw' : 'uint32_t',
    'sd' : 'int64_t',
    'ud' : 'uint64_t',
    'sq' : '__int128_t',
    'uq' : '__uint128_t',
    'sf' : 'float',
    'df' : 'double',
    'qf' : '__uint128_t',
    'vc' : 'PowerISA::VecRegContainer',
}};

def operands {{
    # General Purpose Integer Reg Operands
    'Rs': ('IntReg', 'ud', 'RS', 'IsInteger', 1),
    'Ra': ('IntReg', 'ud', 'RA', 'IsInteger', 2),
    'Rb': ('IntReg', 'ud', 'RB', 'IsInteger', 3),
    'Rc': ('IntReg', 'ud', 'RC', 'IsInteger', 4),
    'Rt': ('IntReg', 'ud', 'RT', 'IsInteger', 5),

    # General Purpose Floating Point Reg Operands
    'Fa': ('FloatReg', 'df', 'FRA', 'IsFloating', 1),
    'Fb': ('FloatReg', 'df', 'FRB', 'IsFloating', 2),
    'Fc': ('FloatReg', 'df', 'FRC', 'IsFloating', 3),
    'Fs': ('FloatReg', 'df', 'FRS', 'IsFloating', 4),
    'Ft': ('FloatReg', 'df', 'FRT', 'IsFloating', 5),

    # Vector Reg Operands
    'Va': ('VecReg', 'vc', 'VRA', 'IsVector', 1),
    'Vb': ('VecReg', 'vc', 'VRB', 'IsVector', 2),
    'Vc': ('VecReg', 'vc', 'VRC', 'IsVector', 3),
    'Vs': ('VecReg', 'vc', 'VRS', 'IsVector', 4),
    'Vt': ('VecReg', 'vc', 'VRT', 'IsVector', 5),

    # Memory Operand
    'Mem': ('Mem', 'ud', None, (None, 'IsLoad', 'IsStore'), 8),

    # Program counter and next
    'CIA': ('PCState', 'ud', 'pc', (None, None, 'IsControl'), 9),
    'NIA': ('PCState', 'ud', 'npc', (None, None, 'IsControl'), 9),

    # Control registers
    'CR': ('IntReg', 'uw', 'INTREG_CR', 'IsInteger', 9),
    'XER': ('IntReg', 'uw', 'INTREG_XER', 'IsInteger', 9),
    'LR': ('IntReg', 'ud', 'INTREG_LR', 'IsInteger', 9),
    'CTR': ('IntReg', 'ud', 'INTREG_CTR', 'IsInteger', 9),
    'TAR': ('IntReg', 'ud', 'INTREG_TAR', 'IsInteger', 9),
    'XER': ('IntReg', 'uw', 'INTREG_XER', 'IsInteger', 9),
    'DSCR': ('IntReg', 'ud', 'INTREG_DSCR', 'IsInteger', 9),
    'DSISR': ('IntReg', 'uw', 'INTREG_DSISR', 'IsInteger', 9),
    'DAR': ('IntReg', 'ud', 'INTREG_DAR', 'IsInteger', 9),
    'DEC': ('IntReg', 'ud', 'INTREG_DEC', 'IsInteger', 9),
    'SRR0': ('IntReg', 'ud', 'INTREG_SRR0', 'IsInteger', 9),
    'SRR1': ('IntReg', 'ud', 'INTREG_SRR1', 'IsInteger', 9),
    'CFAR': ('IntReg', 'ud', 'INTREG_CFAR', 'IsInteger', 9),
    'CTRL': ('IntReg', 'uw', 'INTREG_CTRL', 'IsInteger', 9),
    'VRSAVE': ('IntReg', 'uw', 'INTREG_VRSAVE', 'IsInteger', 9),
    'TB': ('IntReg', 'ud', 'INTREG_TB', 'IsInteger', 9),
    'TBU': ('IntReg', 'uw', 'INTREG_TBU', 'IsInteger', 9),
    'TBL': ('IntReg', 'uw', 'INTREG_TBL', 'IsInteger', 9),
    'PVR': ('IntReg', 'uw', 'INTREG_PVR', 'IsInteger', 9),
    'PPR': ('IntReg', 'ud', 'INTREG_PPR', 'IsInteger', 9),
    'PPR32': ('IntReg', 'uw', 'INTREG_PPR32', 'IsInteger', 9),
    'PTCR': ('IntReg', 'ud', 'INTREG_PTCR', 'IsInteger', 9),
    'SPRG0': ('IntReg', 'ud', 'INTREG_SPRG0', 'IsInteger', 9),
    'SPRG1': ('IntReg', 'ud', 'INTREG_SPRG1', 'IsInteger', 9),
    'SPRG2': ('IntReg', 'ud', 'INTREG_SPRG2', 'IsInteger', 9),
    'SPRG3': ('IntReg', 'ud', 'INTREG_SPRG3', 'IsInteger', 9),
    'LPCR': ('IntReg', 'ud', 'INTREG_LPCR', 'IsInteger' , 9),
    'FSCR': ('IntReg', 'ud', 'INTREG_FSCR', 'IsInteger' , 9),
    'MMCRA': ('IntReg', 'ud', 'INTREG_MMCRA', 'IsInteger' , 9),
    'MMCR0': ('IntReg', 'ud', 'INTREG_MMCR0', 'IsInteger' , 9),
    'MMCR1': ('IntReg', 'ud', 'INTREG_MMCR1', 'IsInteger' , 9),
    'MMCR2': ('IntReg', 'ud', 'INTREG_MMCR2', 'IsInteger' , 9),
    'PSSCR': ('IntReg', 'ud', 'INTREG_PSSCR', 'IsInteger' , 9),
    'LPIDR': ('IntReg', 'uw', 'INTREG_LPIDR', 'IsInteger' , 9),
    'PIDR': ('IntReg', 'uw', 'INTREG_PIDR', 'IsInteger' , 9),
    'HFSCR': ('IntReg', 'ud', 'INTREG_HFSCR', 'IsInteger' , 9),
    'HSPRG0': ('IntReg', 'ud', 'INTREG_HSPRG0', 'IsInteger' , 9),
    'HIR0': ('IntReg', 'ud', 'INTREG_HIR0', 'IsInteger' , 9),
    'MMCRC': ('IntReg', 'ud', 'INTREG_MMCRC', 'IsInteger' , 9),
    'AMOR': ('IntReg', 'ud', 'INTREG_AMOR', 'IsInteger' , 9),
    'IAMR': ('IntReg', 'ud', 'INTREG_IAMR', 'IsInteger' , 9),
    'HSRR1': ('IntReg', 'ud', 'INTREG_HSRR1', 'IsInteger' , 9),
    'HSRR0': ('IntReg', 'ud', 'INTREG_HSRR0', 'IsInteger' , 9),
    'HDEC': ('IntReg', 'ud', 'INTREG_HDEC', 'IsInteger' , 9),
    'PCR': ('IntReg', 'ud', 'INTREG_PCR', 'IsInteger' , 9),
    'AMR': ('IntReg', 'ud', 'INTREG_AMR', 'IsInteger' , 9),
    'TFHAR': ('IntReg', 'ud', 'INTREG_TFHAR', 'IsInteger' , 9),
    'TFIAR': ('IntReg', 'ud', 'INTREG_TFIAR', 'IsInteger' , 9),
    'TEXASR': ('IntReg', 'ud', 'INTREG_TEXASR', 'IsInteger' , 9),
    'TIDR': ('IntReg', 'ud', 'INTREG_TIDR', 'IsInteger' , 9),
    'UAMOR': ('IntReg', 'ud', 'INTREG_UAMOR', 'IsInteger' , 9),
    'DPDES': ('IntReg', 'ud', 'INTREG_DPDES', 'IsInteger' , 9),
    'DAWR0': ('IntReg', 'ud', 'INTREG_DAWR0', 'IsInteger' , 9),
    'RPR': ('IntReg', 'ud', 'INTREG_RPR', 'IsInteger' , 9),
    'CIABR': ('IntReg', 'ud', 'INTREG_CIABR', 'IsInteger' , 9),
    'CIR': ('IntReg', 'uw', 'INTREG_CIR', 'IsInteger' , 9),
    'TBU40': ('IntReg', 'ud', 'INTREG_TBU40', 'IsInteger' , 9),
    'SPURR': ('IntReg', 'ud', 'INTREG_SPURR', 'IsInteger' , 9),
    'PURR': ('IntReg', 'ud', 'INTREG_PURR', 'IsInteger' , 9),
    'HDSISR': ('IntReg', 'uw', 'INTREG_HDSISR', 'IsInteger' , 9),
    'HDAR': ('IntReg', 'ud', 'INTREG_HDAR', 'IsInteger' , 9),
    'HRMOR': ('IntReg', 'ud', 'INTREG_HRMOR', 'IsInteger' , 9),
    'HMER': ('IntReg', 'ud', 'INTREG_HMER', 'IsInteger' , 9),
    'HMEER': ('IntReg', 'ud', 'INTREG_HMEER', 'IsInteger' , 9),
    'SIER': ('IntReg', 'ud', 'INTREG_SIER', 'IsInteger' , 9),
    'PMC1': ('IntReg', 'uw', 'INTREG_PMC1', 'IsInteger' , 9),
    'PMC2': ('IntReg', 'uw', 'INTREG_PMC2', 'IsInteger' , 9),
    'PMC3': ('IntReg', 'uw', 'INTREG_PMC3', 'IsInteger' , 9),
    'PMC4': ('IntReg', 'uw', 'INTREG_PMC4', 'IsInteger' , 9),
    'PMC5': ('IntReg', 'uw', 'INTREG_PMC5', 'IsInteger' , 9),
    'PMC6': ('IntReg', 'uw', 'INTREG_PMC6', 'IsInteger' , 9),
    'SDAR': ('IntReg', 'ud', 'INTREG_SDAR', 'IsInteger' , 9),
    'BESCRS': ('IntReg', 'ud', 'INTREG_BESCRS', 'IsInteger' , 9),
    'BESCRSU': ('IntReg', 'uw', 'INTREG_BESCRSU', 'IsInteger' , 9),
    'BESCRR': ('IntReg', 'ud', 'INTREG_BESCRR', 'IsInteger' , 9),
    'BESCRRU': ('IntReg', 'uw', 'INTREG_BESCRRU', 'IsInteger' , 9),
    'EBBHR': ('IntReg', 'ud', 'INTREG_EBBHR', 'IsInteger' , 9),
    'EBBRR': ('IntReg', 'ud', 'INTREG_EBBRR', 'IsInteger' , 9),
    'BESCR': ('IntReg', 'ud', 'INTREG_BESCR', 'IsInteger' , 9),
    'ASDR': ('IntReg', 'ud', 'INTREG_ASDR', 'IsInteger' , 9),
    'IC': ('IntReg', 'ud', 'INTREG_IC', 'IsInteger' , 9),
    'VTB': ('IntReg', 'ud', 'INTREG_VTB', 'IsInteger' , 9),
    'HSPRG1': ('IntReg', 'ud', 'INTREG_HSPRG1', 'IsInteger' , 9),
    'PIR': ('IntReg', 'uw', 'INTREG_PIR', 'IsInteger' , 9),

    # Setting as IntReg so things are stored as an integer, not double
    'FPSCR': ('IntReg', 'uw', 'INTREG_FPSCR', 'IsFloating', 9),
    'MSR': ('IntReg', 'ud', 'INTREG_MSR', 'IsFloating', 9),

    'VSCR': ('IntReg', 'uw', 'INTREG_VSCR', 'IsVector', 9),

    # Registers for linked loads and stores
    'Rsv': ('IntReg', 'uw', 'INTREG_RSV', 'IsInteger', 9),
    'RsvLen': ('IntReg', 'uw', 'INTREG_RSV_LEN', 'IsInteger', 9),
    'RsvAddr': ('IntReg', 'ud', 'INTREG_RSV_ADDR', 'IsInteger', 9),

    # Hack for non-full-system syscall emulation
    'R0':  ('IntReg', 'ud', '0', None, 1),
}};
