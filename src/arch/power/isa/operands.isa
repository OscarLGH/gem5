// -*- mode:c++ -*-

// Copyright (c) 2009 The University of Edinburgh
// Copyright (c) 2021 IBM Corporation
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met: redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer;
// redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution;
// neither the name of the copyright holders nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

def operand_types {{
    'sb' : 'int8_t',
    'ub' : 'uint8_t',
    'sh' : 'int16_t',
    'uh' : 'uint16_t',
    'sw' : 'int32_t',
    'uw' : 'uint32_t',
    'sd' : 'int64_t',
    'ud' : 'uint64_t',
    'sq' : '__int128_t',
    'uq' : '__uint128_t',
    'sf' : 'float',
    'df' : 'double',
    'vc' : 'PowerISA::VecRegContainer'
}};

def operands {{
    # General Purpose Integer Reg Operands
    'Rs': ('IntReg', 'ud', 'RS', 'IsInteger', 1),
    'Ra': ('IntReg', 'ud', 'RA', 'IsInteger', 2),
    'Rb': ('IntReg', 'ud', 'RB', 'IsInteger', 3),
    'Rc': ('IntReg', 'ud', 'RC', 'IsInteger', 4),
    'Rt': ('IntReg', 'ud', 'RT', 'IsInteger', 5),

    # General Purpose Floating Point Reg Operands
    'Fa': ('VecReg', 'vc', 'FRA', 'IsVector', 1),
    'Fb': ('VecReg', 'vc', 'FRB', 'IsVector', 2),
    'Fc': ('VecReg', 'vc', 'FRC', 'IsVector', 3),
    'Fs': ('VecReg', 'vc', 'FRS', 'IsVector', 4),
    'Ft': ('VecReg', 'vc', 'FRT', 'IsVector', 5),

    # Vector Reg Operands
    'Va': ('VecReg', 'vc', 'VRA + 32', 'IsVector', 1),
    'Vb': ('VecReg', 'vc', 'VRB + 32', 'IsVector', 2),
    'Vc': ('VecReg', 'vc', 'VRC + 32', 'IsVector', 3),
    'Vs': ('VecReg', 'vc', 'VRS + 32', 'IsVector', 4),
    'Vt': ('VecReg', 'vc', 'VRT + 32', 'IsVector', 5),

    # Vector Scalar eXtention Reg Operands
    'VSa': ('VecReg', 'vc', '32 * XX_AX + XX_A', 'IsVector', 1),
    'VSb': ('VecReg', 'vc', '32 * XX_BX + XX_B', 'IsVector', 2),
    'VSc': ('VecReg', 'vc', '32 * XX_CX + XX_C', 'IsVector', 3),
    'VSs': ('VecReg', 'vc', '32 * XX_SX + XX_S', 'IsVector', 4),
    'VSt': ('VecReg', 'vc', '32 * XX_TX + XX_T', 'IsVector', 5),

    # Memory Operand
    'Mem': ('Mem', 'ud', None, (None, 'IsLoad', 'IsStore'), 8),

    # Program counter and next
    'CIA': ('PCState', 'ud', 'pc', (None, None, 'IsControl'), 9),
    'NIA': ('PCState', 'ud', 'npc', (None, None, 'IsControl'), 9),

    # Control registers
    'CR': ('IntReg', 'uw', 'INTREG_CR', 'IsInteger', 9),
    'LR': ('IntReg', 'ud', 'INTREG_LR', 'IsInteger', 9),
    'CTR': ('IntReg', 'ud', 'INTREG_CTR', 'IsInteger', 9),
    'TAR': ('IntReg', 'ud', 'INTREG_TAR', 'IsInteger', 9),
    'XER': ('IntReg', 'uw', 'INTREG_XER', 'IsInteger', 9),
    'MSR': ('IntReg', 'ud', 'INTREG_MSR', 'IsInteger', 9),

    # Setting as IntReg so things are stored as an integer, not double
    'FPSCR': ('IntReg', 'uw', 'INTREG_FPSCR', 'IsFloating', 9),

    # Setting as IntReg so things are stored as an integer, not double
    'VSCR': ('IntReg', 'uw', 'INTREG_VSCR', 'IsInteger', 9),

    # Registers for linked loads and stores
    'Rsv': ('IntReg', 'uw', 'INTREG_RSV', 'IsInteger', 9),
    'RsvLen': ('IntReg', 'uw', 'INTREG_RSV_LEN', 'IsInteger', 9),
    'RsvAddr': ('IntReg', 'ud', 'INTREG_RSV_ADDR', 'IsInteger', 9),
}};
