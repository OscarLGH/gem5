format FloatArithOp {
    329:xscvspdp({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, 32 * XX_AX + XX_A);
        RegId vrb_id(VecRegClass, 32 * XX_BX + XX_B);
        RegId vrc_id(VecRegClass, 32 * XX_CX + XX_C);
        RegId vrt_id(VecRegClass, 32 * XX_TX + XX_T);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<float>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<float>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<uint64_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<double>();
        Fpscr fpscr_0 = FPSCR;

        /*
        ALL PASSED.
        double check why vrb_val[1]
        */

        /* CODE SEG 1 */
        fpscr_0 = fp_before_cal(fpscr_0);
        /* CODE SEG 1 END */
        vrt_val[0] = (vrb_val[1]);
        if (isSnan(vrt_val[0])) {
            fpscr_0.vxsnan = 1;
            vrt_val[0] = SnantoQnan(vrt_val[0]);
        }

        fpscr_0.fr = 0;
        fpscr_0.fi = 0;

        //std::tie(vrt_val[0], fpscr_0) = get_floating_exception(vrb_val[1], vrb_val[1], fpscr_0, (float)vrt_val[0]);
        fpscr_0 = update_fpscr(fpscr_0, fpscr_0);
        fpscr_0 = vsx_set_class((double)vrt_val[0], fpscr_0);
        //vrt_val[1] = vrb_val[0];
        /* CODE SEG 3 END */
        FPSCR = fpscr_0;
        tc->setVecReg(vrt_id, vrt_reg);
    }});

    331:xscvspdpn({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, 32 * XX_AX + XX_A);
        RegId vrb_id(VecRegClass, 32 * XX_BX + XX_B);
        RegId vrc_id(VecRegClass, 32 * XX_CX + XX_C);
        RegId vrt_id(VecRegClass, 32 * XX_TX + XX_T);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<uint64_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<float>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<uint64_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<double>();
        Fpscr fpscr_0 = FPSCR;

        /*
        ALL PASSED.
        double check why vrb_val[1]
        */

        /* CODE SEG 1 */
        //fp_before_cal(fpscr_0);
        /* CODE SEG 1 END */
        vrt_val[0] = (vrb_val[1]);

        //std::tie(vrt_val[0], fpscr_0) = get_floating_exception(vrb_val[0], vrb_val[0], fpscr_0, (float)vrt_val[0]);
        //fpscr_0 = vsx_set_class((double)vrt_val[0], fpscr_0);
        //vrt_val[1] = vrb_val[0];
        /* CODE SEG 3 END */
        FPSCR = fpscr_0;
        tc->setVecReg(vrt_id, vrt_reg);
    }});

    457:xvcvspdp({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, 32 * XX_AX + XX_A);
        RegId vrb_id(VecRegClass, 32 * XX_BX + XX_B);
        RegId vrc_id(VecRegClass, 32 * XX_CX + XX_C);
        RegId vrt_id(VecRegClass, 32 * XX_TX + XX_T);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<float>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<float>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<uint64_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<double>();
        Fpscr fpscr_0 = FPSCR;

        /*
        ALL PASSED.
        double check why vrb_val[1]
        */

        /* CODE SEG 1 */
        fpscr_0 = fp_before_cal(fpscr_0);
        /* CODE SEG 1 END */
        for (int i = 0; i < 2; i++) {
            vrt_val[i] = (vrb_val[i * 2 + 1]);
            if (isSnan(vrt_val[i])) {
                fpscr_0.vxsnan = 1;
                vrt_val[i] = SnantoQnan(vrt_val[i]);
            }
        }
        fpscr_0.fr = 0;
        fpscr_0.fi = 0;

        fpscr_0 = update_fpscr(fpscr_0, fpscr_0);
        //fpscr_0 = vsx_set_class((double)vrt_val[0], fpscr_0);
        //vrt_val[1] = vrb_val[0];
        /* CODE SEG 3 END */
        FPSCR = fpscr_0;
        tc->setVecReg(vrt_id, vrt_reg);
    }});
}