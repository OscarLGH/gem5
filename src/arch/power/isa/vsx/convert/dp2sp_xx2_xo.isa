format VsxFloatArithOp {
    265:xscvdpsp({{
        Fpscr fpscr_0 = FPSCR;
        
        float tmp;
        fpscr_0 = fp_before_cal(fpscr_0);
        tmp = VSb_df[1];
        std::tie(tmp, fpscr_0) =
        get_floating_exception((float)tmp, (float)tmp,
                               fpscr_0, (float)tmp);
        if (!isNan(tmp) && !isInfinity(tmp)) {
            if (fabs((double)tmp) > fabs(VSb_df[1]))
                fpscr_0.fr = 1;
            else
                fpscr_0.fr = 0;
        }
        fpscr_0 = vsx_set_class((double)tmp, fpscr_0);

        VSt_sf[3] = tmp;
        VSt_sf[2] = tmp;
        VSt_sf[1] = 0;
        VSt_sf[0] = 0;
        FPSCR = fpscr_0;
    }});
    
    267:xscvdpspn({{
        Fpscr fpscr_0 = FPSCR;

        fpscr_0 = fp_before_cal(fpscr_0);
        float tmp = bfp32_CONVERT_FROM_BFP64(VSb_df[1]);
        VSt_sf[3] = tmp;
        VSt_sf[2] = tmp;
        VSt_sf[1] = 0;
        VSt_sf[0] = 0;
        FPSCR = fpscr_0;
    }});
    
    393:xvcvdpsp({{
        Fpscr fpscr_0 = FPSCR;
        Fpscr fpscr_1 = FPSCR;

        float tmp;
        fpscr_0 = fp_before_cal(fpscr_0);
        for (int i = 0; i < 2; i++) {
            tmp = VSb_df[i];
            std::tie(tmp, fpscr_0) =
            get_floating_exception(tmp, tmp,
                                   fpscr_0, tmp);
            VSt_sf[i * 2 + 1] = tmp;
            VSt_sf[i * 2] = tmp;
        }

        fpscr_0.fi = fpscr_1.fi;
        FPSCR = fpscr_0;
    }});
}
