format VsxFloatArithOp {
    265:xscvdpsp({{
        Fpscr fpscr_0 = FPSCR;
        
        float tmp;
        fpscr_0 = fp_before_cal(fpscr_0);
        VSt_sf[3] = VSb_df[1];
        std::tie(tmp, fpscr_0) =
        get_floating_exception(VSb_df[1], VSb_df[1],
                               fpscr_0, (double)VSt_sf[3]);
        VSt_sf[3] = tmp;
        if (!isNan(VSb_df[1]) && !isInfinity(VSb_df[1])) {
            if (fabs((double)VSt_sf[3]) > fabs(VSb_df[1]))
                fpscr_0.fr = 1;
            else
                fpscr_0.fr = 0;
        }
        fpscr_0 = vsx_set_class((double)VSt_sf[3], fpscr_0);

        VSt_sf[2] = VSt_sf[3];
        FPSCR = fpscr_0;
    }});
    
    267:xscvdpspn({{
        Fpscr fpscr_0 = FPSCR;

        fpscr_0 = fp_before_cal(fpscr_0);
        VSt_sf[3] = bfp32_CONVERT_FROM_BFP64(VSb_df[1]);
        VSt_sf[2] = VSt_sf[3];
        FPSCR = fpscr_0;
    }});
    
    393:xvcvdpsp({{
        Fpscr fpscr_0 = FPSCR;
        Fpscr fpscr_1 = FPSCR;

        float tmp;
        fpscr_0 = fp_before_cal(fpscr_0);
        for (int i = 0; i < 2; i++) {
            VSt_sf[i * 2 + 1] = VSb_df[i];
            VSt_sf[i * 2] = VSb_df[i];
            std::tie(tmp, fpscr_0) =
            get_floating_exception(VSb_df[i], VSb_df[i],
                                   fpscr_0, (double)VSt_sf[i]);
            VSt_sf[i] = tmp;
        }

        fpscr_0.fi = fpscr_1.fi;
        FPSCR = fpscr_0;
    }});
}
