format VsxFloatArithOp {
    376:xscvsxddp({{
        Fpscr fpscr_0 = FPSCR;

        double tmp;
        std::feclearexcept(FE_ALL_EXCEPT);
        tmp = VSb_sd[1];
        std::tie(VSt_df[1], fpscr_0) =
        get_floating_exception(tmp,
            tmp, fpscr_0, tmp);
        fpscr_0 = vsx_set_class((double)tmp, fpscr_0);
        
        if (!isNan(tmp) && !isInfinity(tmp)) {
            if (tmp > 0.0) {
                if ((__float128)tmp > (__float128)VSb_sd[1])
                    fpscr_0.fr = 1;
                else
                    fpscr_0.fr = 0;
            } else {
                if ((__float128)tmp < (__float128)VSb_sd[1])
                    fpscr_0.fr = 1;
                else
                    fpscr_0.fr = 0;
            }
        }
        VSt_df[1] = tmp;
        VSt_df[0] = 0;
        FPSCR = fpscr_0;
    }});

    504:xvcvsxddp({{
        Fpscr fpscr_0 = FPSCR;
        Fpscr fpscr_1 = FPSCR;

        double tmp;
        std::feclearexcept(FE_ALL_EXCEPT);
        
        for (int i = 0; i < 2; i++) {
            tmp = VSb_sd[i];
            std::tie(tmp, fpscr_0) =
            get_floating_exception(tmp, tmp,
                                     fpscr_0, tmp);
            VSt_df[i] = tmp;
        }
        fpscr_0.fi = fpscr_1.fi;
        FPSCR = fpscr_0;
    }});

    312:xscvsxdsp({{
        Fpscr fpscr_0 = FPSCR;

        double tmp;
        fp_before_cal(fpscr_0);
        tmp = (float)VSb_sd[1];
        std::tie(tmp, fpscr_0) =
        get_floating_exception((float)VSb_sd[1],
            (float)VSb_sd[1], fpscr_0, (float)tmp);
        fpscr_0 = vsx_set_class((double)tmp, fpscr_0);
        
        if (!isNan(tmp) && !isInfinity(tmp)) {
            if (tmp > 0.0) {
                if ((__int128_t)tmp > (__int128_t)VSb_sd[1])
                    fpscr_0.fr = 1;
                else
                    fpscr_0.fr = 0;
            } else {
                if ((__int128_t)tmp < (__int128_t)VSb_sd[1])
                    fpscr_0.fr = 1;
                else
                    fpscr_0.fr = 0;
            }
        }

        VSt_df[1] = tmp;
        VSt_df[0] = 0;

        FPSCR = fpscr_0;
    }});

    440:xvcvsxdsp({{
        Fpscr fpscr_0 = FPSCR;
        Fpscr fpscr_1 = FPSCR;

        float tmp;
        fp_before_cal(fpscr_0);
        for (int i = 0; i < 2; i++) {
            tmp = (float)VSb_sd[i];
            std::tie(tmp, fpscr_0) =
            get_floating_exception((float)VSb_sd[i],
                (float)VSb_sd[i], fpscr_0, tmp);
            VSt_sf[i * 2 + 1] = tmp;
            VSt_sf[i * 2] = tmp;
        }
        fpscr_0.fi = fpscr_1.fi;
        FPSCR = fpscr_0;
    }});
    
    248:xvcvsxwdp({{
        Fpscr fpscr_0 = FPSCR;
        Fpscr fpscr_1 = FPSCR;

        double tmp;
        std::feclearexcept(FE_ALL_EXCEPT);

        for (int i = 0; i < 2; i++) {
            tmp = VSb_sw[2 * i + 1];
            std::tie(tmp, fpscr_0) =
            get_floating_exception(VSb_sw[i],
                VSb_sw[i], fpscr_0, tmp);
            VSt_df[i] = tmp;
        }
        fpscr_0.fi = fpscr_1.fi;
        FPSCR = fpscr_0;
    }});
    
    184:xvcvsxwsp({{
        Fpscr fpscr_0 = FPSCR;
        Fpscr fpscr_1 = FPSCR;

        float tmp;
        std::feclearexcept(FE_ALL_EXCEPT);
        
        for (int i = 0; i < 4; i++) {
            tmp = VSb_sw[i];
            std::tie(tmp, fpscr_0) =
            get_floating_exception(VSb_sw[i],
                VSb_sw[i], fpscr_0, tmp);
            VSt_sf[i] = tmp;
        }
        fpscr_0.fi = fpscr_1.fi;
        FPSCR = fpscr_0;
    }});

    360:xscvuxddp({{
        Fpscr fpscr_0 = FPSCR;

        double tmp;
        std::feclearexcept(FE_ALL_EXCEPT);
        tmp = VSb_ud[1];
        std::tie(tmp, fpscr_0) =
        get_floating_exception(VSb_ud[1],
            VSb_ud[1], fpscr_0, tmp);
        fpscr_0 = vsx_set_class((double)tmp, fpscr_0);

        if (!isNan(tmp) && !isInfinity(tmp)) {
            if (tmp > 0.0) {
                if ((__float128)tmp > (__float128)VSb_ud[1])
                    fpscr_0.fr = 1;
                else
                    fpscr_0.fr = 0;
            } else {
                if ((__float128)tmp < (__float128)VSb_ud[1])
                    fpscr_0.fr = 1;
                else
                    fpscr_0.fr = 0;
            }
        }
        VSt_df[1] = tmp;
        VSt_df[0] = 0;
        FPSCR = fpscr_0;
    }});

    488:xvcvuxddp({{
        Fpscr fpscr_0 = FPSCR;
        Fpscr fpscr_1 = FPSCR;

        double tmp;
        std::feclearexcept(FE_ALL_EXCEPT);

        for (int i = 0; i < 2; i++) {
            tmp = VSb_ud[i];
            std::tie(tmp, fpscr_0) =
            get_floating_exception(VSb_ud[i],
                VSb_ud[i], fpscr_0, tmp);
            VSt_df[i] = tmp;
        }
        
        fpscr_0.fi = fpscr_1.fi;
        FPSCR = fpscr_0;
    }});

    296:xscvuxdsp({{
        Fpscr fpscr_0 = FPSCR;

        double tmp;
        fp_before_cal(fpscr_0);
        tmp = (float)VSb_ud[1];
        std::tie(tmp, fpscr_0) =
        get_floating_exception((float)VSb_ud[1],
            (float)VSb_ud[1], fpscr_0, (float)tmp);
        fpscr_0 = vsx_set_class((double)tmp, fpscr_0);
        
        if (!isNan(tmp) && !isInfinity(tmp)) {
            if ((__uint128_t)tmp > (__uint128_t)VSb_ud[1])
                fpscr_0.fr = 1;
            else
                fpscr_0.fr = 0;
        }
        VSt_df[1] = tmp;
        VSt_df[0] = 0;
        FPSCR = fpscr_0;
    }});

    424:xvcvuxdsp({{
        Fpscr fpscr_0 = FPSCR;
        Fpscr fpscr_1 = FPSCR;

        float tmp;
        fp_before_cal(fpscr_0);
        for (int i = 0; i < 2; i++) {
            tmp = (float)VSb_ud[i];
            VSt_sf[i * 2 + 1] = tmp;
            VSt_sf[i * 2] = tmp;
            std::tie(tmp, fpscr_0) =
            get_floating_exception((float)VSb_ud[i],
                (float)VSb_ud[i], fpscr_0, (float)VSt_sf[i]);
            VSt_sf[i] = tmp;
        }
        fpscr_0.fi = fpscr_1.fi;
        FPSCR = fpscr_0;
    }});

    408:xvcvspsxds({{
        Fpscr fpscr_0 = FPSCR;

        __int128_t tmp;
        double rnd;
        int64_t max = 0x7fffffffffffffffULL;
        int64_t min = 0x8000000000000000ULL;
        for (int i = 0; i < 2; i++) {
            if (isNan(VSb_sf[i * 2 + 1])) {
                tmp = min;
                fpscr_0.vxcvi = 1;
                if (isSnan(VSb_sf[i * 2 + 1])) {
                    fpscr_0.vxsnan = 1;
                }
            } else {
                rnd = trunc(VSb_sf[i * 2 + 1]);
                if (rnd > (float)max) {
                    tmp = max;
                    fpscr_0.vxcvi = 1;
                } else if (rnd < (float)min) {
                    tmp = min;
                    fpscr_0.vxcvi = 1;
                } else {
                    if (rnd != VSb_sf[i * 2 + 1]) {
                        fpscr_0.xx = 1;
                    }
                    tmp = rnd;
                }
            }
            VSt_sd[i] = tmp;
        }
        fpscr_0 = update_fpscr(fpscr_0, fpscr_0);
        FPSCR = fpscr_0;
    }});

    152:xvcvspsxws({{
        Fpscr fpscr_0 = FPSCR;

        __int128_t tmp;
        double rnd;
        int32_t max = 0x7fffffff;
        int32_t min = 0x80000000;
        for (int i = 0; i < 4; i++) {
            if (isNan(VSb_sf[i])) {
                tmp = min;
                fpscr_0.vxcvi = 1;
                if (isSnan(VSb_sf[i])) {
                    fpscr_0.vxsnan = 1;
                }
            } else {
                rnd = trunc(VSb_sf[i]);
                if (rnd > (float)max) {
                    tmp = max;
                    fpscr_0.vxcvi = 1;
                } else if (rnd < (float)min) {
                    tmp = min;
                    fpscr_0.vxcvi = 1;
                } else {
                    if (rnd != VSb_sf[i]) {
                        fpscr_0.xx = 1;
                    }
                    tmp = rnd;
                }
            }
            VSt_sw[i] = tmp;
        }
        fpscr_0 = update_fpscr(fpscr_0, fpscr_0);
        FPSCR = fpscr_0;
    }});

    392:xvcvspuxds({{
        Fpscr fpscr_0 = FPSCR;

        __int128_t tmp;
        double rnd;
        uint64_t max = 0xffffffffffffffffULL;
        uint64_t min = 0;
        for (int i = 0; i < 2; i++) {
            if (isNan(VSb_sf[i * 2 + 1])) {
                tmp = min;
                fpscr_0.vxcvi = 1;
                if (isSnan(VSb_sf[i * 2 + 1])) {
                    fpscr_0.vxsnan = 1;
                }
            } else {
                rnd = trunc(VSb_sf[i * 2 + 1]);
                if (rnd > (float)max) {
                    tmp = max;
                    fpscr_0.vxcvi = 1;
                } else if (rnd < (float)min) {
                    tmp = min;
                    fpscr_0.vxcvi = 1;
                } else {
                    if (rnd != VSb_sf[i * 2 + 1]) {
                        fpscr_0.xx = 1;
                    }
                    tmp = rnd;
                }
            }
            VSt_ud[i] = tmp;
        }
        fpscr_0 = update_fpscr(fpscr_0, fpscr_0);
        FPSCR = fpscr_0;
    }});

    136:xvcvspuxws({{
        Fpscr fpscr_0 = FPSCR;

        fp_before_cal(fpscr_0);
        __int128_t tmp;
        double rnd;
        int64_t max = 0xffffffff;
        int64_t min = 0;
        for (int i = 0; i < 4; i++) {
            if (isNan(VSb_sf[i])) {
                tmp = min;
                fpscr_0.vxcvi = 1;
                if (isSnan(VSb_sf[i])) {
                    fpscr_0.vxsnan = 1;
                }
            } else {
                rnd = bfp64_ROUND_TO_INTEGER_TRUNC(VSb_sf[i]);
                if (rnd > (float)max) {
                    tmp = max;
                    fpscr_0.vxcvi = 1;
                } else if (rnd < (float)min) {
                    tmp = min;
                    fpscr_0.vxcvi = 1;
                } else {
                    if (rnd != VSb_sf[i]) {
                        fpscr_0.xx = 1;
                    }
                    tmp = rnd;
                }
            }
            VSt_uw[i] = tmp;
        }
        fpscr_0 = update_fpscr(fpscr_0, fpscr_0);
        FPSCR = fpscr_0;
    }});

232:xvcvuxwdp({{
         Fpscr fpscr_0 = FPSCR;
         Fpscr fpscr_1 = FPSCR;
         double tmp;
         std::feclearexcept(FE_ALL_EXCEPT);
         for (int i = 0; i < 2; i++) {
             tmp = VSb_uw[i * 2 + 1];

            std::tie(tmp, fpscr_0)=
            get_floating_exception(VSb_uw[i],
                VSb_uw[i], fpscr_0, tmp);
            VSt_df[i] = tmp;
        }
        fpscr_0.fi = fpscr_1.fi;
        FPSCR = fpscr_0;
     }});
168:xvcvuxwsp({{
         Fpscr fpscr_0 = FPSCR;
         Fpscr fpscr_1 = FPSCR;

        float tmp;
        std::feclearexcept(FE_ALL_EXCEPT);
        for (int i = 0; i < 4; i++) {
            tmp = VSb_uw[i];
            std::tie(tmp, fpscr_0) =
            get_floating_exception(VSb_uw[i],
                VSb_uw[i], fpscr_0, tmp);
            VSt_sf[i] = tmp;
        }
        fpscr_0.fi = fpscr_1.fi;
        FPSCR = fpscr_0;
     }});


}
