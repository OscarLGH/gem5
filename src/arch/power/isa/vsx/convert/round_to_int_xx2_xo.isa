format VsxFloatArithOp {
    73:xsrdpi({{  //test failed
        Fpscr fpscr_0 = FPSCR;
        double tmp;
        fp_before_cal(fpscr_0);
        tmp = bfp64_ROUND_TO_INTEGER_NEAR_AWAY(VSb_df[1]);
        std::tie(tmp, fpscr_0) = get_floating_exception(VSb_df[1], VSb_df[1], fpscr_0, tmp);
        fpscr_0 = vsx_set_class(tmp, fpscr_0);
        VSt_df[1] = tmp;
        FPSCR = fpscr_0;
    }});
    
    107:xsrdpic({{
        Fpscr fpscr_0 = FPSCR;

        double tmp;
        fp_before_cal(fpscr_0);
        std::tie(tmp, fpscr_0) = round_current(VSb_df[1], fpscr_0);
        std::tie(tmp, fpscr_0) = get_floating_exception(VSb_df[1],
                                 VSb_df[1], fpscr_0, tmp);
        fpscr_0 = vsx_set_class(tmp, fpscr_0);
        VSt_df[1] = tmp;
        FPSCR = fpscr_0;
    }});
    
    121:xsrdpim({{
        Fpscr fpscr_0 = FPSCR;

        double tmp;
        fp_before_cal(fpscr_0);
        tmp = bfp64_ROUND_TO_INTEGER_FLOOR(VSb_df[1]);
        std::tie(tmp, fpscr_0) = get_floating_exception(VSb_df[1],
                                 VSb_df[1], fpscr_0, tmp);
        fpscr_0 = vsx_set_class(tmp, fpscr_0);
        VSt_df[1] = tmp;
        FPSCR = fpscr_0;
    }});
    
    105:xsrdpip({{
        Fpscr fpscr_0 = FPSCR;

        double tmp;
        fp_before_cal(fpscr_0);
        tmp = bfp64_ROUND_TO_INTEGER_CEIL(VSb_df[1]);
        std::tie(tmp, fpscr_0) = get_floating_exception(VSb_df[1],
                                 VSb_df[1], fpscr_0, tmp);
        fpscr_0 = vsx_set_class(tmp, fpscr_0);
        VSt_df[1] = tmp;
        FPSCR = fpscr_0;
    }});
    
    89:xsrdpiz({{
        Fpscr fpscr_0 = FPSCR;

        double tmp;
        fp_before_cal(fpscr_0);
        tmp = bfp64_ROUND_TO_INTEGER_TRUNC(VSb_df[1]);
        std::tie(tmp, fpscr_0) = get_floating_exception(VSb_df[1],
                                 VSb_df[1], fpscr_0, tmp);
        fpscr_0 = vsx_set_class(tmp, fpscr_0);
        
        VSt_df[1] = tmp;
        FPSCR = fpscr_0;
    }});

    201:xvrdpi({{  //test failed
        Fpscr fpscr_0 = FPSCR;
		double tmp;
        fp_before_cal(fpscr_0);
        /* CODE SEG 1 END */
        /* CODE SEG 2 */
        for (auto i = 0; i < 2; i++) {
            tmp = bfp64_ROUND_TO_INTEGER_NEAR_AWAY(VSb_df[i]);
            std::tie(tmp, fpscr_0) =
                get_floating_exception(VSb_df[i], VSb_df[i], fpscr_0, tmp);
            VSt_df[i] = tmp;
        }
        fpscr_0.fi = 0;
        fpscr_0.fr = 0;
        /* CODE SEG 3 END */
        FPSCR = fpscr_0;
    }});
    
    235:xvrdpic({{
        Fpscr fpscr_0 = FPSCR;
        double tmp;
        fp_before_cal(fpscr_0);
        for (auto i = 0; i < 2; i++) {
            std::tie(tmp, fpscr_0) = round_current(VSb_df[i], fpscr_0);
            std::tie(tmp, fpscr_0) = get_floating_exception(VSb_df[i], VSb_df[i], fpscr_0, tmp);
            VSt_df[i] = tmp;
        }
        fpscr_0.fi = 0;
        fpscr_0.fr = 0;
        FPSCR = fpscr_0;
    }});
    
    249:xvrdpim({{
        Fpscr fpscr_0 = FPSCR;
        double tmp;
        fp_before_cal(fpscr_0);

        for (auto i = 0; i < 2; i++) {
            VSt_df[i] = bfp64_ROUND_TO_INTEGER_FLOOR(VSb_df[i]);
            std::tie(tmp, fpscr_0) = get_floating_exception(VSb_df[i],
                                     VSb_df[i], fpscr_0, VSt_df[i]);
            VSt_df[i] = tmp;
        }

        fpscr_0.fi = 0;
        fpscr_0.fr = 0;
        FPSCR = fpscr_0;
    }});
    
    233:xvrdpip({{
        Fpscr fpscr_0 = FPSCR;
        double tmp;
        fp_before_cal(fpscr_0);

        for (auto i = 0; i < 2; i++) {
            VSt_df[i] = bfp64_ROUND_TO_INTEGER_CEIL(VSb_df[i]);
            std::tie(tmp, fpscr_0) = get_floating_exception(VSb_df[i],
                                     VSb_df[i], fpscr_0, VSt_df[i]);
            VSt_df[i] = tmp;
        }

        fpscr_0.fi = 0;
        fpscr_0.fr = 0;
        FPSCR = fpscr_0;
    }});
    
    217:xvrdpiz({{
        Fpscr fpscr_0 = FPSCR;

        double tmp;
        fp_before_cal(fpscr_0);

        for (auto i = 0; i < 2; i++) {
            VSt_df[i] = bfp64_ROUND_TO_INTEGER_TRUNC(VSb_df[i]);
            std::tie(tmp, fpscr_0) = get_floating_exception(VSb_df[i],
                                     VSb_df[i], fpscr_0, VSt_df[i]);
            VSt_df[i] = tmp;
        }

        fpscr_0.fi = 0;
        fpscr_0.fr = 0;
        FPSCR = fpscr_0;
    }});
    
    137:xvrspi({{
        Fpscr fpscr_0 = FPSCR;

        float tmp;
        fp_before_cal(fpscr_0);
        for (auto i = 0; i < 4; i++) {
            VSt_sf[i] = bfp32_ROUND_TO_INTEGER_NEAR(VSb_sf[i]);
            std::tie(tmp, fpscr_0) = get_floating_exception(VSb_sf[i],
                                     VSb_sf[i], fpscr_0, VSt_sf[i]);
            VSt_sf[i] = tmp;
        }
        fpscr_0.fi = 0;
        fpscr_0.fr = 0;
        FPSCR = fpscr_0;
    }});
    
    171:xvrspic({{
        Fpscr fpscr_0 = FPSCR;
        float tmp;
        fp_before_cal(fpscr_0);
        for (auto i = 0; i < 4; i++) {
            std::tie(tmp, fpscr_0) = round_current(VSb_sf[i], fpscr_0);
            std::tie(tmp, fpscr_0) = get_floating_exception(VSb_sf[i], VSb_sf[i], fpscr_0, tmp);
            VSt_sf[i] = tmp;
        }
        fpscr_0.fi = 0;
        fpscr_0.fr = 0;
        FPSCR = fpscr_0;
    }});
    
    185:xvrspim({{
        Fpscr fpscr_0 = FPSCR;
        float tmp;
        fp_before_cal(fpscr_0);

        for (auto i = 0; i < 4; i++) {
            VSt_sf[i] = bfp32_ROUND_TO_INTEGER_FLOOR(VSb_sf[i]);
            std::tie(tmp, fpscr_0) = get_floating_exception(VSb_sf[i],
                                     VSb_sf[i], fpscr_0, VSt_sf[i]);
            VSt_sf[i] = tmp;
        }

        fpscr_0.fi = 0;
        fpscr_0.fr = 0;
        FPSCR = fpscr_0;
    }});
    
    169:xvrspip({{
        Fpscr fpscr_0 = FPSCR;
        float tmp;
        fp_before_cal(fpscr_0);

        for (auto i = 0; i < 4; i++) {
            VSt_sf[i] = bfp32_ROUND_TO_INTEGER_CEIL(VSb_sf[i]);
            std::tie(tmp, fpscr_0) = get_floating_exception(VSb_sf[i],
                                     VSb_sf[i], fpscr_0, VSt_sf[i]);
            VSt_sf[i] = tmp;
        }

        fpscr_0.fi = 0;
        fpscr_0.fr = 0;
        FPSCR = fpscr_0;
    }});
    
    153:xvrspiz({{
        Fpscr fpscr_0 = FPSCR;
        float tmp;
        fp_before_cal(fpscr_0);

        for (auto i = 0; i < 4; i++) {
            VSt_sf[i] = bfp32_ROUND_TO_INTEGER_TRUNC(VSb_sf[i]);
            std::tie(tmp, fpscr_0) = get_floating_exception(VSb_sf[i],
                                     VSb_sf[i], fpscr_0, VSt_sf[i]);
            VSt_sf[i] = tmp;
        }


        fpscr_0.fi = 0;
        fpscr_0.fr = 0;
        FPSCR = fpscr_0;
    }});
}
