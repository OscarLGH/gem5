
format VsxFloatArithOp {
    3:xxsel({{
        ThreadContext *tc = xc->tcBase();
        RegId vra_id(VecRegClass, 32 * XX_AX + XX_A);
        RegId vrb_id(VecRegClass, 32 * XX_BX + XX_B);
        RegId vrc_id(VecRegClass, 32 * XX_CX + XX_C);
        RegId vrt_id(VecRegClass, 32 * XX_TX + XX_T);
        auto vra_reg = tc->readVecReg(vra_id);
        auto vra_val = vra_reg.as<__uint128_t>();
        auto vrb_reg = tc->readVecReg(vrb_id);
        auto vrb_val = vrb_reg.as<__uint128_t>();
        auto vrc_reg = tc->readVecReg(vrc_id);
        auto vrc_val = vrc_reg.as<__uint128_t>();
        auto vrt_reg = tc->readVecReg(vrt_id);
        auto vrt_val = vrt_reg.as<__uint128_t>();

        /*
        ALL PASSED.
        */

        __uint128_t mask = vrc_val[0];
        vrt_val[0] = (vra_val[0] & ~mask) | (vrb_val[0] & mask);
        tc->setVecReg(vrt_id, vrt_reg);
    }});
}