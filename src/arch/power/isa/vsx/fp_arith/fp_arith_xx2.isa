format VsxFloatArithOp {
    345:xsabsdp({{
        VSt_ud[1] = VSb_ud[1] & 0x7fffffffffffffffULL;
        VSt_ud[0] = 0;
    }});

    473:xvabsdp({{
        for (int i = 0; i < 2; i++) {
            VSt_ud[i] = VSb_ud[i] & 0x7fffffffffffffffULL;
        }
    }});

    361:xsnabsdp({{
        VSt_ud[1] = VSb_ud[1] | 0x8000000000000000ULL;
        VSt_ud[0] = 0;
    }});
    
    377:xsnegdp({{
        VSt_ud[1] = VSb_ud[1] ^ 0x8000000000000000ULL;
        VSt_ud[0] = 0;
    }});

    90:xsredp({{ //precision mismatch
        Fpscr fpscr_0 = FPSCR;
        double tmp; 
        tmp = (double)1.0 / VSb_df[1];
        
        /* CODE SEG 3 */
        fpscr_0.fr = 0;
        fpscr_0.fi = 0;
        //std::tie(tmp, fpscr_0) = get_floating_exception((float)VSb_df[1], (float)VSb_df[1], fpscr_0, (float)tmp);
        fpscr_0.xx = 0;
        fpscr_0 = vsx_set_class(tmp, fpscr_0);
        VSt_df[1] = tmp;
        VSt_df[0] = 0;
        FPSCR = fpscr_0;
    }});
    
    26:xsresp({{  //precision mismatch fpscr mismatch
        Fpscr fpscr_0 = FPSCR;
        double tmp;
        tmp = ((float)1.0 / (float)VSb_df[1]);

        fpscr_0.fr = 0;
        fpscr_0.fi = 0;
        std::tie(tmp, fpscr_0) = get_floating_exception((float)VSb_df[1], (float)VSb_df[1], fpscr_0, (float)tmp);
        fpscr_0.xx = 0;
        fpscr_0 = vsx_set_class(tmp, fpscr_0);
        VSt_df[1] = tmp;
        VSt_df[0] = 0;
        FPSCR = fpscr_0;
    }});
    
    281:xsrsp({{ //fpscr mismatch
        Fpscr fpscr_0 = FPSCR;
        double tmp = (float)VSb_df[1];
        fpscr_0.fr = 0;
        fpscr_0.fi = 0;
        std::tie(tmp, fpscr_0) = get_floating_exception((float)VSb_df[1], (float)VSb_df[1], fpscr_0, (float)tmp);
        fpscr_0.xx = 0;
        fpscr_0 = vsx_set_class(tmp, fpscr_0);

        VSt_df[1] = tmp;
        VSt_df[0] = 0;
        FPSCR = fpscr_0;
    }});
    
    74:xsrsqrtedp({{ //precision mismatch
        Fpscr fpscr_0 = FPSCR;
        double tmp;
        tmp = bfp64_RECIPROCAL_SQRT_ESTIMATE(VSb_df[1]);

        fpscr_0.fr = 0;
        fpscr_0.fi = 0;
        //std::tie(tmp, fpscr_0) = get_floating_exception((float)VSb_df[1], (float)VSb_df[1], fpscr_0, (float)tmp);
        fpscr_0.xx = 0;
        fpscr_0 = vsx_set_class(tmp, fpscr_0);

        VSt_df[1] = tmp;
        VSt_df[0] = 0;
        FPSCR = fpscr_0;
    }});
    
    10:xsrsqrtesp({{ //precision mismatch
        Fpscr fpscr_0 = FPSCR;
        double tmp;
        tmp = (float)bfp32_RECIPROCAL_SQRT_ESTIMATE(VSb_df[1]);
        fpscr_0.fr = 0;
        fpscr_0.fi = 0;
        //std::tie(tmp, fpscr_0) = get_floating_exception((float)VSb_df[1], (float)VSb_df[1], fpscr_0, (float)tmp);
        fpscr_0.xx = 0;
        fpscr_0 = vsx_set_class(tmp, fpscr_0);
        VSt_df[1] = tmp;
        VSt_df[0] = 0;
        FPSCR = fpscr_0;
    }});
    
    75:xssqrtdp({{ //fpscr mismatch
        Fpscr fpscr_0 = FPSCR;
        double tmp;
        tmp = sqrt(VSb_df[1]);

        fpscr_0.fr = 0;
        fpscr_0.fi = 0;
        //std::tie(tmp, fpscr_0) = get_floating_exception((float)VSb_df[1], (float)VSb_df[1], fpscr_0, (float)tmp);
        fpscr_0.xx = 0;
        fpscr_0 = vsx_set_class(tmp, fpscr_0);
        
        VSt_df[1] = tmp;
        VSt_df[0] = 0;
        FPSCR = fpscr_0;
    }});
    
    11:xssqrtsp({{ //fpscr mismatch
        Fpscr fpscr_0 = FPSCR;

        double tmp;
        tmp = (float)sqrt(VSb_df[1]);

        fpscr_0.fr = 0;
        fpscr_0.fi = 0;
        //std::tie(tmp, fpscr_0) = get_floating_exception((float)VSb_df[1], (float)VSb_df[1], fpscr_0, (float)tmp);
        fpscr_0.xx = 0;
        fpscr_0 = vsx_set_class(tmp, fpscr_0);
        VSt_df[1] = tmp;
        VSt_df[0] = 0;
        FPSCR = fpscr_0;
    }});
    
    139:xvsqrtsp({{  //fpscr mismatch
        Fpscr fpscr_0 = FPSCR;
        for (auto i = 0; i < 4; i++) {
            /* CODE SEG 2 */
            VSt_sf[i] = (float)sqrt(VSb_sf[i]);
            fpscr_0.fr = 0;
            fpscr_0.fi = 0;
            //std::tie(VSt_sf[i], fpscr_0) = get_floating_exception((float)VSb_sf[i], (float)VSb_sf[i], fpscr_0, (float)VSt_sf[i]);
            fpscr_0.xx = 0;
            fpscr_0 = vsx_set_class(VSt_sf[i], fpscr_0);
        }
        FPSCR = fpscr_0;
    }});
    
    203:xvsqrtdp({{  //fpscr mismatch
        Fpscr fpscr_0 = FPSCR;
        for (auto i = 0; i < 2; i++) {
            /* CODE SEG 2 */
            VSt_df[i] = sqrt(VSb_df[i]);
            fpscr_0.fr = 0;
            fpscr_0.fi = 0;
            //std::tie(VSt_df[i], fpscr_0) = get_floating_exception((float)VSb_df[i], (float)VSb_df[i], fpscr_0, (float)VSb_df[i]);
            fpscr_0.xx = 0;
            fpscr_0 = vsx_set_class(VSt_df[i], fpscr_0);
        }
        FPSCR = fpscr_0;
    }});

    409:xvabssp({{
        for (int i = 0; i < 4; i++) {
            VSt_uw[i] = VSb_uw[i] & 0x7fffffff;
        }
    }});
    
    489:xvnabsdp({{
        for (auto i = 0; i < 2; i++) {
            VSt_ud[i] = VSb_ud[i] | 0x8000000000000000ULL;
        }
    }});
    
    425:xvnabssp({{
        for (auto i = 0; i < 4; i++) {
            VSt_uw[i] = VSb_uw[i] | 0x80000000;
        }
    }});
    
    505:xvnegdp({{
        for (auto i = 0; i < 2; i++) {
            VSt_ud[i] = VSb_ud[i] ^ 0x8000000000000000ULL;
        }
    }});
    
    441:xvnegsp({{
        for (auto i = 0; i < 4; i++) {
            VSt_uw[i] = VSb_uw[i] ^ 0x80000000;
        }
    }});
    
    164: xxspltw({{
        for(int i = 0; i < 4; i++) {
            VSt_uw[i] = VSb_uw[3 - UIM14_15];
        }
    }});
}
