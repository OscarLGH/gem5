format VsxFloatArithOp {
    32:xsadddp({{
        Fpscr fpscr_0 = FPSCR;
        double tmp;
        std::tie(tmp, fpscr_0) = bfp64_ADD(VSa_df[1], VSb_df[1], fpscr_0);
        fpscr_0 = vsx_set_class((double)tmp, fpscr_0);
        VSt_df[1] = tmp;
        FPSCR = fpscr_0;
    }});

    0:xsaddsp({{
        Fpscr fpscr_0 = FPSCR;
        double tmp;
        std::tie(tmp, fpscr_0) = bfp32_ADD(VSa_df[1], VSb_df[1], fpscr_0);
        fpscr_0 = vsx_set_class((float)tmp, fpscr_0);
        VSt_df[1] = tmp;
        FPSCR = fpscr_0;
    }});

    176:xscpsgndp({{
        VSt_ud[1] = (VSa_ud[1] & 0x8000000000000000ULL) | (VSb_ud[1] & 0x7fffffffffffffffULL);
    }});

    56:xsdivdp({{
        Fpscr fpscr_0 = FPSCR;
        double tmp;
        std::tie(tmp, fpscr_0) = bfp64_DIV(VSa_df[1], VSb_df[1], fpscr_0);
        fpscr_0 = vsx_set_class(tmp, fpscr_0);
        VSt_df[1] = tmp;
        FPSCR = fpscr_0;
    }});

    24:xsdivsp({{
        Fpscr fpscr_0 = FPSCR;
        double tmp;
        std::tie(tmp, fpscr_0) = bfp32_DIV(VSa_df[1], VSb_df[1], fpscr_0);
        fpscr_0 = vsx_set_class((float)tmp, fpscr_0);
        VSt_df[1] = tmp;
        FPSCR = fpscr_0;
    }});

    33:xsmaddadp({{
        Fpscr fpscr_0 = FPSCR;
        double tmp;
        std::tie(tmp, fpscr_0) = bfp64_MULTIPLY_ADD(VSa_df[1], VSb_df[1], VSt_df[1], fpscr_0);
        fpscr_0 = vsx_set_class(tmp, fpscr_0);
        VSt_df[1] = tmp;
        FPSCR = fpscr_0;
    }});

    41:xsmaddmdp({{
        Fpscr fpscr_0 = FPSCR;
        double tmp;
        std::tie(tmp, fpscr_0) = bfp64_MULTIPLY_ADD(VSa_df[1], VSt_df[1], VSb_df[1], fpscr_0);
        fpscr_0 = vsx_set_class(tmp, fpscr_0);
        VSt_df[1] = tmp;
        FPSCR = fpscr_0;
    }});

    1:xsmaddasp({{
        Fpscr fpscr_0 = FPSCR;
        double tmp;
        std::tie(tmp, fpscr_0) = bfp32_MULTIPLY_ADD(VSa_df[1], VSb_df[1], VSt_df[1], fpscr_0);
        fpscr_0 = vsx_set_class((float)tmp, fpscr_0);
        VSt_df[1] = tmp;
        FPSCR = fpscr_0;
    }});

    9:xsmaddmsp({{
        Fpscr fpscr_0 = FPSCR;
        double tmp;
        std::tie(tmp, fpscr_0) = bfp32_MULTIPLY_ADD(VSa_df[1], VSt_df[1], VSb_df[1], fpscr_0);
        fpscr_0 = vsx_set_class((float)tmp, fpscr_0);
        VSt_df[1] = tmp;
        FPSCR = fpscr_0;
    }});

    160:xsmaxdp({{
        Fpscr fpscr_0 = FPSCR;
        double tmp;
        std::tie(tmp, fpscr_0) = bfp64_MAX(VSa_df[1], VSb_df[1], fpscr_0);
        VSt_df[1] = tmp;
        FPSCR = fpscr_0;
    }});

    168:xsmindp({{
        Fpscr fpscr_0 = FPSCR;
        double tmp;
        std::tie(tmp, fpscr_0) = bfp64_MIN(VSa_df[1], VSb_df[1], fpscr_0);
        VSt_df[1] = tmp;
        FPSCR = fpscr_0;
    }});

    49:xsmsubadp({{
        Fpscr fpscr_0 = FPSCR;
        double tmp;
        std::tie(tmp, fpscr_0) = bfp64_MULTIPLY_ADD(VSa_df[1], VSb_df[1], bfp_NEGATE(VSt_df[1]), fpscr_0);
        fpscr_0 = vsx_set_class(tmp, fpscr_0);
        VSt_df[1] = tmp;
        FPSCR = fpscr_0;
    }});

    57:xsmsubmdp({{
        Fpscr fpscr_0 = FPSCR;
        double tmp;
        std::tie(tmp, fpscr_0) = bfp64_MULTIPLY_ADD(VSa_df[1], VSt_df[1], bfp_NEGATE(VSb_df[1]), fpscr_0);
        fpscr_0 = vsx_set_class(tmp, fpscr_0);
        VSt_df[1] = tmp;
        FPSCR = fpscr_0;
    }});

    17:xsmsubasp({{
        Fpscr fpscr_0 = FPSCR;
        double tmp;
        std::tie(tmp, fpscr_0) = bfp32_MULTIPLY_ADD(VSa_df[1], VSb_df[1], bfp_NEGATE(VSt_df[1]), fpscr_0);
        fpscr_0 = vsx_set_class((float)tmp, fpscr_0);
        VSt_df[1] = tmp;
        FPSCR = fpscr_0;
    }});

    25:xsmsubmsp({{
        Fpscr fpscr_0 = FPSCR;
        double tmp;
        std::tie(tmp, fpscr_0) = bfp32_MULTIPLY_ADD(VSa_df[1], VSt_df[1], bfp_NEGATE(VSb_df[1]), fpscr_0);
        fpscr_0 = vsx_set_class((float)tmp, fpscr_0);
        VSt_df[1] = tmp;
        FPSCR = fpscr_0;
    }});

    48:xsmuldp({{
        Fpscr fpscr_0 = FPSCR;
        double tmp;
        std::tie(tmp, fpscr_0) = bfp64_MULTIPLY(VSa_df[1], VSb_df[1], fpscr_0);

        fpscr_0 = vsx_set_class(tmp, fpscr_0);
        VSt_df[1] = tmp;
        FPSCR = fpscr_0;
    }});

    16:xsmulsp({{
        Fpscr fpscr_0 = FPSCR;
        double tmp;
        std::tie(tmp, fpscr_0) = bfp32_MULTIPLY(VSa_df[1], VSb_df[1], fpscr_0);
        fpscr_0 = vsx_set_class((float)tmp, fpscr_0);
        VSt_df[1] = tmp;
        FPSCR = fpscr_0;
    }});

    161:xsnmaddadp({{
        Fpscr fpscr_0 = FPSCR;
        double tmp;
        std::tie(tmp, fpscr_0) = bfp64_MULTIPLY_ADD(VSa_df[1], VSb_df[1], VSt_df[1], fpscr_0);
        tmp = bfp_NEGATE(tmp);
        fpscr_0 = vsx_set_class(tmp, fpscr_0);
        VSt_df[1] = tmp;
        FPSCR = fpscr_0;
    }});

    169:xsnmaddmdp({{
        Fpscr fpscr_0 = FPSCR;
        double tmp;
        std::tie(tmp, fpscr_0) = bfp64_MULTIPLY_ADD(VSa_df[1], VSt_df[1], VSb_df[1], fpscr_0);
        tmp = bfp_NEGATE(tmp);
        fpscr_0 = vsx_set_class(tmp, fpscr_0);
        VSt_df[1] = tmp;
        FPSCR = fpscr_0;
    }});

    129:xsnmaddasp({{
        Fpscr fpscr_0 = FPSCR;
        double tmp;
        std::tie(tmp, fpscr_0) = bfp32_MULTIPLY_ADD(VSa_df[1], VSb_df[1], VSt_df[1], fpscr_0);
        tmp = bfp_NEGATE(tmp);
        fpscr_0 = vsx_set_class((float)tmp, fpscr_0);
        VSt_df[1] = tmp;
        FPSCR = fpscr_0;
    }});

    137:xsnmaddmsp({{
        Fpscr fpscr_0 = FPSCR;
        double tmp;
        std::tie(tmp, fpscr_0) = bfp32_MULTIPLY_ADD(VSa_df[1], VSt_df[1], VSb_df[1], fpscr_0);
        tmp = bfp_NEGATE(tmp);
        fpscr_0 = vsx_set_class((float)tmp, fpscr_0);
        VSt_df[1] = tmp;
        FPSCR = fpscr_0;
    }});

    177:xsnmsubadp({{
        Fpscr fpscr_0 = FPSCR;
        double tmp;
        std::tie(tmp, fpscr_0) = bfp64_MULTIPLY_ADD(VSa_df[1], VSb_df[1], bfp_NEGATE(VSt_df[1]), fpscr_0);
        tmp = bfp_NEGATE(tmp);
        fpscr_0 = vsx_set_class(tmp, fpscr_0);
        VSt_df[1] = tmp;
        FPSCR = fpscr_0;
    }});

    185:xsnmsubmdp({{
        Fpscr fpscr_0 = FPSCR;
        double tmp;
        std::tie(tmp, fpscr_0) = bfp64_MULTIPLY_ADD(VSa_df[1], VSt_df[1], bfp_NEGATE(VSb_df[1]), fpscr_0);
        tmp = bfp_NEGATE(tmp);
        fpscr_0 = vsx_set_class(tmp, fpscr_0);
        VSt_df[1] = tmp;
        FPSCR = fpscr_0;
    }});

    145:xsnmsubasp({{
        Fpscr fpscr_0 = FPSCR;
        double tmp;
        std::tie(tmp, fpscr_0) = bfp32_MULTIPLY_ADD(VSa_df[1], VSb_df[1], bfp_NEGATE(VSt_df[1]), fpscr_0);
        tmp = bfp_NEGATE(tmp);
        fpscr_0 = vsx_set_class((float)tmp, fpscr_0);
        VSt_df[1] = tmp;
        FPSCR = fpscr_0;
    }});

    153:xsnmsubmsp({{
        Fpscr fpscr_0 = FPSCR;
        double tmp;
        std::tie(tmp, fpscr_0) = bfp32_MULTIPLY_ADD(VSa_df[1], VSt_df[1], bfp_NEGATE(VSb_df[1]), fpscr_0);
        tmp = bfp_NEGATE(tmp);
        fpscr_0 = vsx_set_class((float)tmp, fpscr_0);
        VSt_df[1] = tmp;
        FPSCR = fpscr_0;
    }});

    40:xssubdp({{
        Fpscr fpscr_0 = FPSCR;
        double tmp;
        std::tie(tmp, fpscr_0) = bfp64_ADD(VSa_df[1], bfp_NEGATE(VSb_df[1]), fpscr_0);
        fpscr_0 = vsx_set_class(tmp, fpscr_0);
        VSt_df[1] = tmp;
        FPSCR = fpscr_0;
    }});

    8:xssubsp({{
        Fpscr fpscr_0 = FPSCR;
        double tmp;
        std::tie(tmp, fpscr_0) = bfp32_ADD(VSa_df[1], bfp_NEGATE(VSb_df[1]), fpscr_0);
        fpscr_0 = vsx_set_class((float)tmp, fpscr_0);
        VSt_df[1] = tmp;
        FPSCR = fpscr_0;
    }});

    96:xvadddp({{
        Fpscr fpscr_0 = FPSCR;
        for (auto i = 0; i < 2; i++) {
            double tmp;
            std::tie(tmp, fpscr_0) = bfp64_ADD(VSa_df[i], VSb_df[i], fpscr_0);
            fpscr_0.fi = 0;
            fpscr_0.fr = 0;
            VSt_df[i] = tmp;
        }
        FPSCR = fpscr_0;
    }});

    64:xvaddsp({{
        Fpscr fpscr_0 = FPSCR;
        for (auto i = 0; i < 4; i++) {
            double tmp;
            std::tie(tmp, fpscr_0) = bfp32_ADD(VSa_sf[i], VSb_sf[i], fpscr_0);
            fpscr_0.fi = 0;
            fpscr_0.fr = 0;
            VSt_sf[i] = tmp;
        }
        FPSCR = fpscr_0;
    }});

    240:xvcpsgndp({{
        Fpscr fpscr_0 = FPSCR;
        for (auto i = 0; i < 2; i++) {
            VSt_ud[i] = (VSa_ud[i] & 0x8000000000000000ULL) | (VSb_ud[i] & 0x7fffffffffffffffULL);
        }
        FPSCR = fpscr_0;
    }});

    208:xvcpsgnsp({{
        Fpscr fpscr_0 = FPSCR;

        for (auto i = 0; i < 4; i++) {
            VSt_uw[i] = (VSa_uw[i] & 0x80000000) | (VSb_uw[i] & 0x7fffffff);
        }

        FPSCR = fpscr_0;
    }});

    120:xvdivdp({{
        Fpscr fpscr_0 = FPSCR;
        for (auto i = 0; i < 2; i++) {
            double tmp;
            std::tie(tmp, fpscr_0) = bfp64_DIV(VSa_df[i], VSb_df[i], fpscr_0);
            fpscr_0.fi = 0;
            fpscr_0.fr = 0;
            VSt_df[i] = tmp;
        }
        FPSCR = fpscr_0;
    }});
    
    88:xvdivsp({{
        Fpscr fpscr_0 = FPSCR;
        for (auto i = 0; i < 4; i++) {
            double tmp;
            std::tie(tmp, fpscr_0) = bfp32_DIV(VSa_sf[i], VSb_sf[i], fpscr_0);
            fpscr_0.fi = 0;
            fpscr_0.fr = 0;
            VSt_sf[i] = tmp;
        }

        FPSCR = fpscr_0;
    }});

    97:xvmaddadp({{
        Fpscr fpscr_0 = FPSCR;
        for (auto i = 0; i < 2; i++) {
            double tmp;
            std::tie(tmp, fpscr_0) = bfp64_MULTIPLY_ADD(VSa_df[i], VSb_df[i], VSt_df[i], fpscr_0);
            fpscr_0.fi = 0;
            fpscr_0.fr = 0;
            VSt_df[i] = tmp;
        }
        FPSCR = fpscr_0;
    }});
    
    105:xvmaddmdp({{
        Fpscr fpscr_0 = FPSCR;
        for (auto i = 0; i < 2; i++) {
            double tmp;
            std::tie(tmp, fpscr_0) = bfp64_MULTIPLY_ADD(VSa_df[i], VSt_df[i], VSb_df[i], fpscr_0);
            fpscr_0.fi = 0;
            fpscr_0.fr = 0;
            VSt_df[i] = tmp;
        }
        FPSCR = fpscr_0;
    }});
    
    65:xvmaddasp({{
        Fpscr fpscr_0 = FPSCR;
        for (auto i = 0; i < 4; i++) {
            double tmp;
            std::tie(tmp, fpscr_0) = bfp32_MULTIPLY_ADD(VSa_sf[i], VSb_sf[i], VSt_sf[i], fpscr_0);
            fpscr_0.fi = 0;
            fpscr_0.fr = 0;
            VSt_sf[i] = tmp;
        }
        FPSCR = fpscr_0;
    }});
    
    73:xvmaddmsp({{
        Fpscr fpscr_0 = FPSCR;
        for (auto i = 0; i < 4; i++) {
            double tmp;
            std::tie(tmp, fpscr_0) = bfp32_MULTIPLY_ADD(VSa_sf[i], VSt_sf[i], VSb_sf[i], fpscr_0);
            fpscr_0.fi = 0;
            fpscr_0.fr = 0;
            VSt_sf[i] = tmp;
        }
        FPSCR = fpscr_0;
    }});
    
    224:xvmaxdp({{
        Fpscr fpscr_0 = FPSCR;
        for (auto i = 0; i < 2; i++) {
            double tmp;
            std::tie(tmp, fpscr_0) = bfp64_MAX(VSa_df[i], VSb_df[i], fpscr_0);
            VSt_df[i] = tmp;
        }
        FPSCR = fpscr_0;
    }});
    
    192:xvmaxsp({{
        Fpscr fpscr_0 = FPSCR;
        for (auto i = 0; i < 4; i++) {
            double tmp;
            std::tie(tmp, fpscr_0) = bfp32_MAX(VSa_sf[i], VSb_sf[i], fpscr_0);
            VSt_sf[i] = tmp;
        }
        FPSCR = fpscr_0;
    }});
    
    232:xvmindp({{
        Fpscr fpscr_0 = FPSCR;
        for (auto i = 0; i < 2; i++) {
            double tmp;
            std::tie(tmp, fpscr_0) = bfp64_MIN(VSa_df[i], VSb_df[i], fpscr_0);
            VSt_df[i] = tmp;
        }
        FPSCR = fpscr_0;
    }});
    
    200:xvminsp({{
        Fpscr fpscr_0 = FPSCR;

        for (auto i = 0; i < 4; i++) {
            double tmp;
            std::tie(tmp, fpscr_0) = bfp32_MIN(VSa_sf[i], VSb_sf[i], fpscr_0);
            VSt_sf[i] = tmp;
        }
        FPSCR = fpscr_0;
    }});
    
    113:xvmsubadp({{
        Fpscr fpscr_0 = FPSCR;
        for (auto i = 0; i < 2; i++) {
            double tmp;
            std::tie(tmp, fpscr_0) = bfp64_MULTIPLY_ADD(VSa_df[i], VSb_df[i], bfp_NEGATE(VSt_df[i]), fpscr_0);
            fpscr_0.fi = 0;
            fpscr_0.fr = 0;
            VSt_df[i] = tmp;
        }
        FPSCR = fpscr_0;
    }});
    
    121:xvmsubmdp({{
        Fpscr fpscr_0 = FPSCR;
        for (auto i = 0; i < 2; i++) {
            double tmp;
            std::tie(tmp, fpscr_0) = bfp64_MULTIPLY_ADD(VSa_df[i], VSt_df[i], bfp_NEGATE(VSb_df[i]), fpscr_0);
            fpscr_0.fi = 0;
            fpscr_0.fr = 0;
            VSt_df[i] = tmp;
        }
        FPSCR = fpscr_0;
    }});
    
    81:xvmsubasp({{
        Fpscr fpscr_0 = FPSCR;
        for (auto i = 0; i < 4; i++) {
            double tmp;
            std::tie(tmp, fpscr_0) = bfp32_MULTIPLY_ADD(VSa_sf[i], VSb_sf[i], bfp_NEGATE(VSt_sf[i]), fpscr_0);
            fpscr_0.fi = 0;
            fpscr_0.fr = 0;
            VSt_sf[i] = tmp;
        }
        FPSCR = fpscr_0;
    }});
    
    89:xvmsubmsp({{
        Fpscr fpscr_0 = FPSCR;
        for (auto i = 0; i < 4; i++) {
            double tmp;
            std::tie(tmp, fpscr_0) = bfp32_MULTIPLY_ADD(VSa_sf[i], VSt_sf[i], bfp_NEGATE(VSb_sf[i]), fpscr_0);
            fpscr_0.fi = 0;
            fpscr_0.fr = 0;
            VSt_sf[i] = tmp;
        }
        FPSCR = fpscr_0;
    }});
    
    112:xvmuldp({{
        Fpscr fpscr_0 = FPSCR;
        for (auto i = 0; i < 2; i++) {
            double tmp;
            std::tie(tmp, fpscr_0) = bfp64_MULTIPLY(VSa_df[i], VSb_df[i], fpscr_0);
            fpscr_0.fi = 0;
            fpscr_0.fr = 0;
            VSt_df[i] = tmp;
        }
        FPSCR = fpscr_0;
    }});
    
    80:xvmulsp({{
        Fpscr fpscr_0 = FPSCR;
        for (auto i = 0; i < 4; i++) {
            double tmp;
            std::tie(tmp, fpscr_0) = bfp32_MULTIPLY(VSa_sf[i], VSb_sf[i], fpscr_0);
            fpscr_0.fi = 0;
            fpscr_0.fr = 0;
            VSt_sf[i] = tmp;
        }
        FPSCR = fpscr_0;
    }});

    225:xvnmaddadp({{
        Fpscr fpscr_0 = FPSCR;
        for (auto i = 0; i < 2; i++) {
            double tmp;
            std::tie(tmp, fpscr_0) = bfp64_MULTIPLY_ADD(VSa_df[i], VSb_df[i], VSt_df[i], fpscr_0);
            fpscr_0.fi = 0;
            fpscr_0.fr = 0;
            VSt_df[i] = bfp_NEGATE(tmp);
        }
        FPSCR = fpscr_0;
    }});

    233:xvnmaddmdp({{
        Fpscr fpscr_0 = FPSCR;
        for (auto i = 0; i < 2; i++) {
            double tmp;
            std::tie(tmp, fpscr_0) = bfp64_MULTIPLY_ADD(VSa_df[i], VSt_df[i], VSb_df[i], fpscr_0);
            fpscr_0.fi = 0;
            fpscr_0.fr = 0;
            VSt_df[i] = bfp_NEGATE(tmp);
        }
        FPSCR = fpscr_0;
    }});

    193:xvnmaddasp({{
        Fpscr fpscr_0 = FPSCR;
        for (auto i = 0; i < 4; i++) {
            double tmp;
            std::tie(tmp, fpscr_0) = bfp32_MULTIPLY_ADD(VSa_sf[i], VSb_sf[i], VSt_sf[i], fpscr_0);
            fpscr_0.fi = 0;
            fpscr_0.fr = 0;
            VSt_sf[i] = bfp_NEGATE(tmp);
        }
        FPSCR = fpscr_0;
    }});

    201:xvnmaddmsp({{
        Fpscr fpscr_0 = FPSCR;
        for (auto i = 0; i < 4; i++) {
            double tmp;
            std::tie(tmp, fpscr_0) = bfp32_MULTIPLY_ADD(VSa_sf[i], VSt_sf[i], VSb_sf[i], fpscr_0);
            fpscr_0.fi = 0;
            fpscr_0.fr = 0;
            VSt_sf[i] = bfp_NEGATE(tmp);
        }
        FPSCR = fpscr_0;
    }});

    241:xvnmsubadp({{
        Fpscr fpscr_0 = FPSCR;
        for (auto i = 0; i < 2; i++) {
            double tmp;
            std::tie(tmp, fpscr_0) = bfp64_MULTIPLY_ADD(VSa_df[i], VSb_df[i], bfp_NEGATE(VSt_df[i]), fpscr_0);
            fpscr_0.fi = 0;
            fpscr_0.fr = 0;
            VSt_df[i] = bfp_NEGATE(tmp);
        }
        FPSCR = fpscr_0;
    }});

    249:xvnmsubmdp({{
        Fpscr fpscr_0 = FPSCR;
        for (auto i = 0; i < 2; i++) {
            double tmp;
            std::tie(tmp, fpscr_0) = bfp64_MULTIPLY_ADD(VSa_df[i], VSt_df[i], bfp_NEGATE(VSb_df[i]), fpscr_0);
            fpscr_0.fi = 0;
            fpscr_0.fr = 0;
            VSt_df[i] = bfp_NEGATE(tmp);
        }
        FPSCR = fpscr_0;
    }});

    209:xvnmsubasp({{
        Fpscr fpscr_0 = FPSCR;
        for (auto i = 0; i < 4; i++) {
            double tmp;
            std::tie(tmp, fpscr_0) = bfp32_MULTIPLY_ADD(VSa_sf[i], VSb_sf[i], bfp_NEGATE(VSt_sf[i]), fpscr_0);
            fpscr_0.fi = 0;
            fpscr_0.fr = 0;
            VSt_sf[i] = bfp_NEGATE(tmp);
        }
        FPSCR = fpscr_0;
    }});

    217:xvnmsubmsp({{
        Fpscr fpscr_0 = FPSCR;
        for (auto i = 0; i < 4; i++) {
            double tmp;
            std::tie(tmp, fpscr_0) = bfp32_MULTIPLY_ADD(VSa_sf[i], VSt_sf[i], bfp_NEGATE(VSb_sf[i]), fpscr_0);
            fpscr_0.fi = 0;
            fpscr_0.fr = 0;
            VSt_sf[i] = bfp_NEGATE(tmp);
        }
        FPSCR = fpscr_0;
    }});

    104:xvsubdp({{
        Fpscr fpscr_0 = FPSCR;
        for (auto i = 0; i < 2; i++) {
            double tmp;
            std::tie(tmp, fpscr_0) = bfp64_ADD(VSa_df[i], bfp_NEGATE(VSb_df[i]), fpscr_0);
            fpscr_0.fi = 0;
            fpscr_0.fr = 0;
            VSt_df[i] = tmp;
        }
        FPSCR = fpscr_0;
    }});

    72:xvsubsp({{
        Fpscr fpscr_0 = FPSCR;
        for (auto i = 0; i < 4; i++) {
            double tmp;
            std::tie(tmp, fpscr_0) = bfp32_ADD(VSa_sf[i], bfp_NEGATE(VSb_sf[i]), fpscr_0);
            fpscr_0.fi = 0;
            fpscr_0.fr = 0;
            VSt_sf[i] = tmp;
        }
        FPSCR = fpscr_0;
    }});

    61: xstdivdp({{
		// TODO if (MSR.VEC == 0) ???
		ThreadContext *tc = xc->tcBase();
		RegId vra_id(VecRegClass, 32 * XX_AX + XX_A);
        RegId vrb_id(VecRegClass, 32 * XX_BX + XX_B);
		auto vra_reg = tc->readVecReg(vra_id); auto vra_val = vra_reg.as<double>();
		auto vrb_reg = tc->readVecReg(vrb_id); auto vrb_val = vrb_reg.as<double>();

		// uint32_t eq_flag = 0;
		// uint32_t gt_flag = 0;
		uint32_t fe_flag = 0;
		uint32_t fg_flag = 0;
		// uint32_t fl_flag = 0;

		
			uint64_t *pVala = reinterpret_cast<uint64_t *>(&vra_val[1]);
			uint64_t *pValb = reinterpret_cast<uint64_t *>(&vrb_val[1]);
			int16_t e_a = ((*pVala >> (64-12)) & 0x00000000000007FF) - 1023;
			int16_t e_b = ((*pValb >> (64-12)) & 0x00000000000007FF) - 1023;
			fe_flag = fe_flag | isNan(vra_val[1]) | isInfinity(vra_val[1]) |
				isNan(vrb_val[1]) | isInfinity(vrb_val[1]) |
				(e_b <= -1022) |
				(e_b >=  1021) |
				(!isZero(vra_val[1]) & ((e_a - e_b) >=	1023)) |
				(!isZero(vra_val[1]) & ((e_a - e_b) <= -1021)) |
				(!isZero(vra_val[1]) & (e_a <= -970));
			fg_flag = fg_flag | isInfinity(vra_val[1]) | isInfinity(vrb_val[1]) |
				isZero(vrb_val[1]) | isDenormalized(vrb_val[1]);
		
		CR = insertCRField(CR, BF, ((1 << 3) | (fg_flag << 2) | (fe_flag << 1)));
	}}); 

	125: xvtdivdp({{
		// TODO if (MSR.VEC == 0) ???
		ThreadContext *tc = xc->tcBase();
		RegId vra_id(VecRegClass, 32 * XX_AX + XX_A);
        RegId vrb_id(VecRegClass, 32 * XX_BX + XX_B);
		auto vra_reg = tc->readVecReg(vra_id); auto vra_val = vra_reg.as<double>();
		auto vrb_reg = tc->readVecReg(vrb_id); auto vrb_val = vrb_reg.as<double>();

		// uint32_t eq_flag = 0;
		// uint32_t gt_flag = 0;
		uint32_t fe_flag = 0;
		uint32_t fg_flag = 0;
		// uint32_t fl_flag = 0;

		for (auto i = 0; i < 2; i++) {
			uint64_t *pVala = reinterpret_cast<uint64_t *>(&vra_val[i]);
			uint64_t *pValb = reinterpret_cast<uint64_t *>(&vrb_val[i]);
			int16_t e_a = ((*pVala >> (64-12)) & 0x00000000000007FF) - 1023;
			int16_t e_b = ((*pValb >> (64-12)) & 0x00000000000007FF) - 1023;
			fe_flag = fe_flag | isNan(vra_val[i]) | isInfinity(vra_val[i]) |
				isNan(vrb_val[i]) | isInfinity(vrb_val[i]) |
				(e_b <= -1022) |
				(e_b >=  1021) |
				(!isZero(vra_val[i]) & ((e_a - e_b) >=	1023)) |
				(!isZero(vra_val[i]) & ((e_a - e_b) <= -1021)) |
				(!isZero(vra_val[i]) & (e_a <= -970));
			fg_flag = fg_flag | isInfinity(vra_val[i]) | isInfinity(vrb_val[i]) |
				isZero(vrb_val[i]) | isDenormalized(vrb_val[i]);
		}

		CR = insertCRField(CR, BF, ((1 << 3) | (fg_flag << 2) | (fe_flag << 1)));
	}}); 

	93: xvtdivsp({{
		// TODO if (MSR.VEC == 0) ???
		ThreadContext *tc = xc->tcBase();
		RegId vra_id(VecRegClass, 32 * XX_AX + XX_A);
        RegId vrb_id(VecRegClass, 32 * XX_BX + XX_B);
		auto vra_reg = tc->readVecReg(vra_id); auto vra_val = vra_reg.as<float>();
		auto vrb_reg = tc->readVecReg(vrb_id); auto vrb_val = vrb_reg.as<float>();

		// uint32_t eq_flag = 0;
		// uint32_t gt_flag = 0;
		uint32_t fe_flag = 0;
		uint32_t fg_flag = 0;
		// uint32_t fl_flag = 0;

		for (auto i = 0; i < 4; i++) {
			uint32_t *pVala = reinterpret_cast<uint32_t *>(&vra_val[i]);
			uint32_t *pValb = reinterpret_cast<uint32_t *>(&vrb_val[i]);
			int8_t e_a = ((*pVala >> 24) & 0x0000007F) - 127;
			int8_t e_b = ((*pValb >> 24) & 0x0000007F) - 127;
			fe_flag = fe_flag | isNan(vra_val[i]) | isInfinity(vra_val[i]) |
				isNan(vrb_val[i]) | isInfinity(vrb_val[i]) |
				(e_b <= -126) |
				(e_b >=  125) |
				(!isZero(vra_val[i]) & ((e_a - e_b) >=	127)) |
				(!isZero(vra_val[i]) & ((e_a - e_b) <= -125)) |
				(!isZero(vra_val[i]) & (e_a <= -103));
			fg_flag = fg_flag | isInfinity(vra_val[i]) | isInfinity(vrb_val[i]) |
				isZero(vrb_val[i]) | isDenormalized(vrb_val[i]);
		}

		CR = insertCRField(CR, BF, ((1 << 3) | (fg_flag << 2) | (fe_flag << 1)));
	}}); 

}
